<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <!-- Service for export of NACHA files (see https://www.nacha.org) -->

    <service verb="generate" noun="NachaFile">
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
            <parameter name="fromDate" type="Timestamp"><description>If null no limit on look back</description></parameter>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp">
                <description>If null look through now</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentMethodFileId"/>
            <parameter name="nachaText"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>
            <entity-find-one entity-name="mantle.account.method.BankAccount" value-field="bankAccount"/>
            <if condition="!bankAccount"><return error="true" message="Payment method [${paymentMethodId}] is not a bank account"/></if>

            <!-- find applicable payments (match fromPartyId and statusId=PmntAuthorized, or toPartyId and PmntPromised) -->
            <entity-find entity-name="mantle.account.payment.Payment" list="paymentList" for-update="true">
                <econditions combine="or">
                    <econditions combine="and">
                        <econdition field-name="fromPartyId" from="paymentMethod.ownerPartyId"/>
                        <econdition field-name="statusId" value="PmntAuthorized"/>
                    </econditions>
                    <econditions combine="and">
                        <econdition field-name="toPartyId" from="paymentMethod.ownerPartyId"/>
                        <econdition field-name="statusId" value="PmntPromised"/>
                    </econditions>
                </econditions>
                <econdition field-name="paymentInstrumentEnumId" value="PiAch"/>
                <econdition field-name="paymentMethodFileId" from="null"/>
                <order-by field-name="effectiveDate"/>
            </entity-find>

            <!-- no payments? return now with a message -->
            <if condition="!paymentList"><return message="No pending ACH payments found for payment method [${paymentMethodId}]"/></if>

            <!-- count of files sent today for File ID Modifier in File Header char 34 -->
            <set field="todayRange" from="ec.user.getPeriodRange('day', '0')"/>
            <entity-find-count entity-name="mantle.account.method.PaymentMethodFile" count-field="fileCount">
                <econdition field-name="fileDate" operator="greater-equals" from="todayRange[0]"/>
                <econdition field-name="fileDate" operator="less-equals" from="todayRange[1]"/>
            </entity-find-count>
            <if condition="fileCount &gt; 35"><message error="true">More than 35 files not allowed in one day (payment method [${paymentMethodId}]), found ${fileCount}</message></if>

            <!-- check some configuration values -->
            <if condition="!bankAccount.nachaImmedDest || bankAccount.nachaImmedDest.length() != 9">
                <message error="true">NACHA Immediate Destination field (${bankAccount.nachaImmedDest}) on Bank Account must be 9 characters</message></if>
            <if condition="!bankAccount.nachaImmedOrig || bankAccount.nachaImmedOrig.length() != 9">
                <message error="true">NACHA Immediate Origin field (${bankAccount.nachaImmedOrig}) on Bank Account must be 9 characters</message></if>
            <set field="nachaImmedDestName" from="bankAccount.nachaImmedDestName ?: bankAccount.bankName"/>
            <if condition="!nachaImmedDestName || nachaImmedDestName.length() &gt; 23">
                <message error="true">NACHA Immediate Destination Name field (${nachaImmedDestName}) on Bank Account must be specified and not more than 23 characters</message></if>
            <set field="nachaImmedOrigName" from="bankAccount.nachaImmedOrigName ?: paymentMethod.companyNameOnAccount"/>
            <if condition="!nachaImmedOrigName || nachaImmedOrigName.length() &gt; 23">
                <message error="true">NACHA Immediate Origin Name field (${nachaImmedOrigName}) on Bank Account must be specified and not more than 23 characters</message></if>

            <check-errors/>

            <!-- create a PaymentMethodFile record, get the paymentMethodFileId -->
            <set field="fileDate" from="ec.user.nowTimestamp"/>
            <set field="fileTypeEnumId" value="PmftNacha"/>
            <service-call name="create#mantle.account.method.PaymentMethodFile" in-map="context" out-map="context"/>

            <!-- TODO generate the NACHA file -->
            <!-- TODO File Header (1) -->
            <!-- TODO Batch Header (5) -->
            <script><![CDATA[
                nacha = new StringBuilder()

                // File Header (1)
                // 01-01: Record Type Code = '1'
                // 02-03: Priority Code = '01'
                nacha.append("101")
                // 04-13: Immediate Destination (space + 9 digits as TTTTAAAAC, really whatever bank specifies)
                nacha.append(" ").append(bankAccount.nachaImmedDest)
                // 14-23: Immediate Origin (space + 9 digits)
                nacha.append(" ").append(bankAccount.nachaImmedOrig)
                // 24-29: File Creation Date
                nacha.append(ec.l10n.format(fileDate, "yyMMdd"))
                // 30-33: File Creation Time
                nacha.append(ec.l10n.format(fileDate, "HHmm"))
                // 34-34: File ID Modifier (count of files for the day)
                nacha.append(Character.toUpperCase(Character.forDigit((int) fileCount, 36)))
                // 35-37: Record Size: '094'
                // 38-39: Blocking Factor: '10'
                // 40-40: Format Code: '1'
                nacha.append("094101")
                // 41-63: Immediate Destination Name
                nacha.append(bankAccount.nachaImmedDestName.toUpperCase().padRight(23, ' '))
                // 64-86: Immediate Origin Name
                nacha.append(bankAccount.nachaImmedOrigName.toUpperCase().padRight(23, ' '))
                // 87-94: Reference Code, not used, just 8 spaces
                nacha.append("        ")

                // append line end and start Batch Header
                nacha.appen('\n')

                // TODO Batch Header (5)
                // 01-01: Record Type Code = '5'
                // 02-04: Service Class Code = '200'
                nacha.append("5200")
                // 05-20: Company Name (16 chars)
                // 21-40: Company discretionary data (20 chars)
                // 41-50: Company ID
                // 51-53: Standard Entry Class Code
                // 54-63: Company Entry Description (for receiver's bank account)
                // 64-69: Company Descriptive Date
                // 70-75: Effective Entry Date
                // 76-78: Settlement Date (Julian Cal)
                // 79-79: Originator Status Code = '1'
                // 80-87: Originating DFI Identification
                // 88-94: Batch Number (7 chars)

                // TODO Entry Detail (6) & Addenda (7)
                for (EntityValue payment in paymentList) {

                }

                // TODO Batch Control (8)
                // TODO File Control (9)
            ]]></script>


            <!-- TODO set paymentMethodFileId on all Payment records -->
            <!-- TODO for outgoing Payment (credit) update statusId to PmntDelivered -->
            <!-- TODO for incoming Payment (debit) update statusId to PmntAuthorized or PmntDelivered? -->
        </actions>
    </service>
</services>
