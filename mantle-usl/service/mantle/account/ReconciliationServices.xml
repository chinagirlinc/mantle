<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">
    <service verb="match" noun="BankAccountTransUnmatched">
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>

            <entity-find entity-name="mantle.payment.method.BankAccountTrans" list="bankAccountTransList">
                <econdition field-name="paymentMethodId"/>
                <econditions combine="or">
                    <econdition field-name="paymentId" from="null"/>
                    <econdition field-name="acctgTransId" from="null"/>
                </econditions>
            </entity-find>

            <set field="ignoreTypeSet" from="new HashSet(['INT', 'DIV', 'FEE', 'SRVCHG'])"/>

            <iterate list="bankAccountTransList" entry="bankAccountTrans">
                <if condition="!bankAccountTrans.transAmount || !bankAccountTrans.postedDate"><continue/></if>
                <set field="paymentId" from="null"/>
                <set field="acctgTransId" from="null"/><set field="acctgTransEntrySeqId" from="null"/>

                <!-- find matching Payment, ignore certain transType values for payments -->
                <if condition="!bankAccountTrans.paymentId &amp;&amp; !ignoreTypeSet.contains(bankAccountTrans.transType)">
                    <!-- if transType is DEBIT PaymentMethod.ownerPartyId is fromPartyId, if CREDIT then is toPartyId;
                        OR just look at sign of transAmount? (- fromPartyId, + toPartyId) -->

                    <!-- match against Payment.paymentMethodId or toPaymentMethodId -->
                    <!-- if we have checkNumber or refNumber match against Payment.paymentRefNum -->
                    <!-- otherwise match against transAmount, postedDate (within X number of days after Payment.effectiveDate?) -->

                    <!-- if paymentMethod.currencyUomId match against Payment.amountUomId -->

                    <!-- nothing found? match against originalCurrencyAmount, originalCurrencyUomId -->

                    <!-- TODO -->

                    <!-- make sure Payment has no existing match on BankAccountTrans -->
                </if>
                <if condition="!bankAccountTrans.acctgTransId &amp;&amp; paymentMethod.glAccountId">
                    <!-- if transAmount positive debitCreditFlag=D, else debitCreditFlag=C -->
                    <!-- look for abs of transAmount -->

                    <!-- if we have a paymentId, look up AcctgTrans by paymentId -->
                    <!-- otherwise match against transAmount, postedDate (within X number of days after AcctgTrans.transactionDate?) -->

                    <!-- look for AcctgTransEntry.reconcileStatusId=AterNot -->
                    <!-- with reconcileStatusId need to make sure AcctgTransEntry has no existing match on BankAccountTrans? -->

                    <!-- TODO -->

                    <!-- match PaymentMethod.glAccountId against BankAccountTrans.glAccountId -->
                </if>
                <if condition="paymentId || acctgTransId">
                    <service-call name="mantle.account.ReconciliationServices.reconcile#BankAccountTrans"
                            in-map="[paymentMethodId:paymentMethodId, fitId:bankAccountTrans.fitId,
                                bankAccountTrans:bankAccountTrans, paymentId:paymentId,
                                acctgTransId:acctgTransId, acctgTransEntrySeqId:acctgTransEntrySeqId]"/>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="reconcile" noun="BankAccountTrans">
        <description>Record reconciliation for a BankAccountTrans record against Payment and/or AcctgTransEntry. Called
            by match#BankAccountTransUnmatched or can be called directly for manual match.</description>
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
            <parameter name="fitId" required="true"/>
            <parameter name="bankAccountTrans" type="EntityValue"/>
            <parameter name="paymentId"/>
            <parameter name="acctgTransId"/>
            <parameter name="acctgTransEntrySeqId"/>
        </in-parameters>
        <actions>
            <if condition="!bankAccountTrans">
                <entity-find-one entity-name="mantle.payment.method.BankAccountTrans" value-field="bankAccountTrans"/></if>

            <if condition="paymentId">
                <!-- if another BankAccountTrans has this paymentId clear it -->
                <entity-find entity-name="mantle.payment.method.BankAccountTrans" list="existingTransList">
                    <econdition field-name="paymentId"/></entity-find>
                <iterate list="existingTransList" entry="existingTrans">
                    <set field="existingTrans.paymentId" from="null"/>
                    <entity-update value-field="existingTrans"/>
                </iterate>

                <!-- set the paymentId -->
                <set field="bankAccountTrans.paymentId" from="paymentId"/>
                <entity-update value-field="bankAccountTrans"/>
            </if>
            <if condition="acctgTransId &amp;&amp; acctgTransEntrySeqId">
                <!-- if another BankAccountTrans has this acctgTransId/acctgTransEntrySeqId clear them -->
                <entity-find entity-name="mantle.payment.method.BankAccountTrans" list="existingTransList">
                    <econdition field-name="acctgTransId"/><econdition field-name="acctgTransEntrySeqId"/></entity-find>
                <iterate list="existingTransList" entry="existingTrans">
                    <set field="existingTrans.acctgTransId" from="null"/>
                    <set field="existingTrans.acctgTransEntrySeqId" from="null"/>
                    <entity-update value-field="existingTrans"/>
                </iterate>

                <!-- set the acctgTransId and acctgTransEntrySeqId -->
                <set field="bankAccountTrans.acctgTransId" from="acctgTransId"/>
                <set field="bankAccountTrans.acctgTransEntrySeqId" from="acctgTransEntrySeqId"/>
                <entity-update value-field="bankAccountTrans"/>

                <!-- set AcctgTransEntry.reconcileStatusId -->
                <entity-find-one entity-name="mantle.ledger.transaction.AcctgTransEntry" value-field="acctgTransEntry"/>
                <if condition="acctgTransEntry.reconcileStatusId != 'AterRec'">
                    <set field="acctgTransEntry.reconcileStatusId" value="AterRec"/>
                    <entity-update value-field="acctgTransEntry"/>
                </if>
            </if>
        </actions>
    </service>
</services>
