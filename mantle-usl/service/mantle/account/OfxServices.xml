<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">
    <service verb="import" noun="OfxVersion1">
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
            <parameter name="ofxString" required="true" allow-html="any"/>
        </in-parameters>
        <actions>
            <set field="sgmlReader" from="new org.moqui.impl.util.SimpleSgmlReader(ofxString)"/>
            <set field="header" from="sgmlReader.getHeader()"/>
            <set field="ofxNode" from="sgmlReader.getRoot()"/>
            <log message="====== ofxString: ${ofxString}"/>
            <log message="====== headerMap: ${header}"/>
            <log message="====== ofxNode:\n${org.moqui.impl.util.FtlNodeWrapper.prettyPrintNode(ofxNode)}"/>

            <entity-find-one entity-name="mantle.account.method.BankAccount" value-field="bankAccount"/>
            <if condition="!bankAccount"><return error="true" message="Payment Method [${paymentMethodId}] is not a Bank Account"/></if>

            <set field="STMTRS" from="ofxNode.BANKMSGSRSV1?.getAt(0)?.STMTTRNRS?.getAt(0)?.STMTRS?.getAt(0)"/>
            <if condition="!STMTRS"><return error="true" message="Invalid OFX file, could not find STMTRS element"/></if>

            <!-- make sure the bank account matches -->
            <set field="BANKACCTFROM" from="STMTRS.BANKACCTFROM?.getAt(0)"/>
            <if condition="BANKACCTFROM">
                <!-- make sure routingNumber matches STMTRS.BANKACCTFROM.BANKID -->
                <set field="BANKID" from="BANKACCTFROM.BANKID[0].value"/>
                <if condition="bankAccount.routingNumber != BANKID">
                    <message error="true">OFX BANKID [${BANKID}] does not match routing number [${bankAccount.routingNumber}] on Bank Account [${paymentMethodId}]</message></if>
                <!-- make sure accountNumber matches STMTRS.BANKACCTFROM.ACCTID (note: may be partial, use contains) -->
                <set field="ACCTID" from="BANKACCTFROM.ACCTID[0].value"/>
                <if condition="ACCTID.contains(bankAccount.accountNumber)">
                    <message error="true">OFX ACCTID [${ACCTID}] does not match (or contain) account number [${bankAccount.accountNumber}] on Bank Account [${paymentMethodId}]</message></if>
            </if>

            <!-- import the transactions -->
            <set field="BANKTRANLIST" from="STMTRS.BANKTRANLIST?.getAt(0)"/>
            <iterate list="BANKTRANLIST.STMTTRN" entry="STMTTRN">
                <set field="fitId" from="STMTTRN.FITID[0].value"/>
                <!-- if we already have the tx skip it -->
                <entity-find-one entity-name="mantle.account.method.PaymentMethodTrans" value-field="bankAccountTrans">
                    <field-map field-name="paymentMethodId"/><field-map field-name="fitId"/></entity-find-one>
                <if condition="bankAccountTrans"><continue/></if>

                <!-- create the tx record -->

                <!-- possible formats include: yyyyMMdd (GMT), yyyyMMddHHmmss (GMT), yyyyMMddHHmmss.SSS (GMT), yyyyMMddHHmmss.SSS[-5:EST] -->
                <set field="DTPOSTED" from="STMTTRN.DTPOSTED[0].value"/>
                <if condition="DTPOSTED.length() &lt;= 18">
                    <then>
                        <script><![CDATA[
                            while (DTPOSTED.length() < 14) { DTPOSTED = DTPOSTED + "0" }
                            if (DTPOSTED.length() < 15) { DTPOSTED = DTPOSTED + "." }
                            while (DTPOSTED.length() < 18) { DTPOSTED = DTPOSTED + "0" }
                            DTPOSTED = DTPOSTED + " +0000"
                        ]]></script>
                    </then>
                    <else>
                        <!-- has a time zone, strip it and create an RFC 822 time zone (like -0500) -->
                        <set field="tzStr" from="DTPOSTED.substring(19, DTPOSTED.indexOf(':', 19))"/>
                        <if condition="tzStr.length == 2"><set field="tzStr" from="tzStr[0] + '0' + tzStr[1]"/></if>
                        <set field="DTPOSTED" from="DTPOSTED.substring(0, 19) + ' ' + tzStr + '00'"/>
                    </else>
                </if>
                <set field="postedDate" from="ec.l10n.parseTimestamp(DTPOSTED, 'yyyyMMddHHmmss.SSS Z')"/>
                <log message="========= DTPOSTED=${DTPOSTED}, orig=${STMTTRN.DTPOSTED[0].value}, postedDate=${postedDate}"/>

                <!-- as per spec amount will only contain a comma if used as a decimal separator, so replace with a dot and parse to BD -->
                <set field="TRNAMT" from="STMTTRN.TRNAMT[0].value"/>
                <if condition="TRNAMT.contains(',')"><set field="TRNAMT" from="TRNAMT.replace(',', '.')"/></if>
                <set field="transAmount" from="new BigDecimal(TRNAMT)"/>

                <set field="transName" from="STMTTRN.NAME?.getAt(0)?.value ?: STMTTRN.PAYEE?.getAt(0)?.value"/>

                <service-call name="create#mantle.account.method.PaymentMethodTrans" in-map="[paymentMethodId:paymentMethodId,
                        fitId:fitId, transType:STMTTRN.TRNTYPE[0].value, postedDate:postedDate,
                        transAmount:transAmount, transName:transName, transMemo:STMTTRN.MEMO?.getAt(0)?.value,
                        checkNumber:STMTTRN.CHECKNUM?.getAt(0)?.value, refNumber:STMTTRN.REFNUM?.getAt(0)?.value]"/>
            </iterate>

            <!-- TODO: update ledgerBalance, availableBalance, balanceDate (only if more recent than last balanceDate) -->
        </actions>
    </service>
</services>
