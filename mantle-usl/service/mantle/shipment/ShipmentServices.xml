<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <!-- ==================================================== -->
    <!-- ========== Shipment View/Display Services ========== -->
    <!-- ==================================================== -->

    <service verb="get" noun="ShipmentDisplayInfo">
        <in-parameters><parameter name="shipmentId"/></in-parameters>
        <out-parameters>
            <parameter name="shipment" type="Map"/>
            <parameter name="statusItem" type="Map"/>
            <parameter name="shipmentTypeEnum" type="Map"/>
            <parameter name="isIncoming" type="Boolean"/>
            <parameter name="fromPartyDetail" type="Map"/>
            <parameter name="toPartyDetail" type="Map"/>
            <parameter name="statusHistoryList" type="List"/>
            <parameter name="shipmentItemDetailList" type="List"/>
            <parameter name="shipmentRouteSegmentList" type="List"/>
            <parameter name="shipmentPackageList" type="List"/>
            <parameter name="shipmentItemSourceList" type="List"/>
            <parameter name="orderIdSet" type="Set"/>
            <parameter name="invoiceIdSet" type="Set"/>
            <parameter name="contentList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <set field="statusItem" from="shipment.'Shipment#moqui.basic.StatusItem'"/>
            <set field="shipmentTypeEnum" from="shipment.'ShipmentType#moqui.basic.Enumeration'"/>
            <set field="isIncoming" from="shipmentTypeEnum?.enumId == 'ShpTpIncoming' || parentEnumId == 'ShpTpIncoming'"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromPartyDetail">
                <field-map field-name="partyId" from="shipment.fromPartyId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toPartyDetail">
                <field-map field-name="partyId" from="shipment.toPartyId"/></entity-find-one>

            <entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList">
                <econdition field-name="changedEntityName" value="mantle.shipment.Shipment"/>
                <econdition field-name="changedFieldName" value="statusId"/>
                <econdition field-name="pkPrimaryValue" from="shipmentId"/>
                <order-by field-name="changedDate"/>
            </entity-find>

            <entity-find entity-name="mantle.shipment.ShipmentItemDetail" list="shipmentItemDetailList">
                <econdition field-name="shipmentId"/><order-by field-name="productId"/></entity-find>
            <entity-find entity-name="mantle.shipment.ShipmentRouteSegmentDetail" list="shipmentRouteSegmentList">
                <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find>
            <entity-find-related value-field="shipment" relationship-name="mantle.shipment.ShipmentPackage"
                    list="shipmentPackageList" order-by-list="['shipmentPackageSeqId']"/>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                <econdition field-name="shipmentId"/></entity-find>
            <set field="orderIdSet" from="new TreeSet()"/>
            <set field="invoiceIdSet" from="new TreeSet()"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource"><script>
                if (shipmentItemSource.orderId) orderIdSet.add(shipmentItemSource.orderId)
                if (shipmentItemSource.invoiceId) invoiceIdSet.add(shipmentItemSource.invoiceId)
            </script></iterate>

            <entity-find entity-name="mantle.shipment.ShipmentContent" list="contentList">
                <econdition field-name="shipmentId"/><order-by field-name="-contentDate"/></entity-find>
        </actions>
    </service>

    <!-- ========================================================= -->
    <!-- ========== Shipment Create and Modify Services ========== -->
    <!-- ========================================================= -->

    <service verb="create" noun="Shipment">
        <in-parameters>
            <auto-parameters entity-name="mantle.shipment.Shipment"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentRouteSegment"/>
            <parameter name="statusId" default-value="ShipInput"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
        </out-parameters>
        <actions>
            <service-call name="create#mantle.shipment.Shipment" in-map="context" out-map="context"/>
            <service-call name="create#mantle.shipment.ShipmentRouteSegment" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="ShipmentAndRouteSegment">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <auto-parameters entity-name="mantle.shipment.Shipment" include="nonpk"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentRouteSegment" include="nonpk"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.shipment.Shipment" in-map="context" out-map="context"/>
            <if condition="!shipmentRouteSegmentSeqId">
                <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="srsList">
                    <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find>
                <set field="shipmentRouteSegmentSeqId" from="srsList?.get(0).shipmentRouteSegmentSeqId"/>
            </if>
            <if condition="shipmentRouteSegmentSeqId">
                <service-call name="update#mantle.shipment.ShipmentRouteSegment" in-map="context" out-map="context"/>
            </if>
        </actions>
    </service>
    <service verb="create" noun="ShipmentItem">
        <description>Create a ShipmentItem and a single ShipmentItemSource with quantityNotHandled defaulting to the full quantity.</description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="productId" required="true"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentItem" include="nonpk"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentItemSource" include="nonpk"/>
            <parameter name="statusId" default="SisPending"/>
        </in-parameters>
        <out-parameters><parameter name="shipmentItemSourceId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.shipment.ShipmentItem" in-map="context" out-map="context"/>
            <set field="quantityNotHandled" from="quantityNotHandled != null ? quantityNotHandled : quantity"/>
            <service-call name="create#mantle.shipment.ShipmentItemSource" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="ShipmentItem">
        <description>Update a ShipmentItem and if applicable a related ShipmentItemSource.</description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="productId" required="true"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentItem" include="nonpk"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentItemSource"/>
        </in-parameters>
        <out-parameters><parameter name="shipmentItemSourceId"/></out-parameters>
        <actions>
            <if condition="quantity &lt; 0"><return error="true" message="Quantity cannot be less than zero"/></if>

            <!-- get the shipment type and if outgoing don't allow quantity increase over what is on related order items -->
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <service-call name="org.moqui.impl.BasicServices.find#EnumerationByParent" out-map="shipmentTypeOut"
                    in-map="[parentEnumId:'ShpTpOutgoing']"/>
            <set field="noOverQuantity" from="shipment.shipmentTypeEnumId in shipmentTypeOut.enumIdSet"/>

            <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem"/>
            <set field="quantityChange" from="quantity - shipmentItem.quantity"/>
            <entity-set value-field="shipmentItem"/>
            <entity-update value-field="shipmentItem"/>

            <if condition="shipmentItemSourceId">
                <!-- if shipmentItemSourceId passed in, update that one -->
                <entity-find-one entity-name="mantle.shipment.ShipmentItemSource" value-field="sis"/>
                <entity-set value-field="sis"/>
                <set field="sis.quantity" from="(sis.quantity ?: 0) + quantityChange"/>
                <set field="sis.quantityNotHandled" from="(sis.quantityNotHandled ?: 0) + quantityChange"/>
                <entity-update value-field="sis"/>

                <else>
                    <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="sisList">
                        <econdition field-name="shipmentId"/><econdition field-name="productId"/></entity-find>
                    <set field="sisQuantity" from="0"/>

                    <filter-map-list list="sisList" to-list="noOrderSisList"><field-map field-name="orderId" from="null"/></filter-map-list>
                    <set field="orderSisList" from="[]"/>
                    <iterate list="sisList" entry="sis"><script>if (sis.orderId) orderSisList.add(sis)</script></iterate>

                    <!-- use a different quantityChange for SIS based on current ShipmentItem.quantity so they match -->
                    <iterate list="sisList" entry="sis"><set field="sisQuantity" from="sisQuantity + sis.quantity"/></iterate>
                    <set field="quantityChange" from="quantity - sisQuantity"/>

                    <if condition="quantityChange &gt; 0">
                        <!-- quantity increase, first find SIS records for OrderItems with quantity not already on a
                                shipment, then find SIS with no orderId and update that one, if none create on -->
                        <set field="increaseRemaining" from="quantityChange"/>

                        <iterate list="orderSisList" entry="sis">
                            <!-- get quantity for all ShipmentItemSource records for the order item -->
                            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="itemSisList">
                                <econdition field-name="orderId" from="sis.orderId"/>
                                <econdition field-name="orderItemSeqId" from="sis.orderItemSeqId"/>
                                <select-field field-name="quantity"/>
                            </entity-find>
                            <set field="itemShipmentQuantity" from="0"/>
                            <iterate list="itemSisList" entry="itemSis"><set field="itemShipmentQuantity"
                                    from="itemShipmentQuantity + itemSis.quantity"/></iterate>

                            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem">
                                <field-map field-name="orderId" from="sis.orderId"/>
                                <field-map field-name="orderItemSeqId" from="sis.orderItemSeqId"/>
                            </entity-find-one>

                            <set field="itemQuantityRemaining" from="orderItem.quantity - itemShipmentQuantity"/>

                            <set field="currentChange" from="increaseRemaining &gt; itemQuantityRemaining ?
                                    itemQuantityRemaining : increaseRemaining"/>
                            <if condition="currentChange">
                                <set field="sis.quantity" from="(sis.quantity ?: 0) + currentChange"/>
                                <set field="sis.quantityNotHandled" from="(sis.quantityNotHandled ?: 0) + currentChange"/>
                                <entity-update value-field="sis"/>
                                <set field="increaseRemaining" from="increaseRemaining - currentChange"/>
                                <if condition="increaseRemaining == 0"><break/></if>
                            </if>
                        </iterate>

                        <if condition="increaseRemaining &amp;&amp; noOverQuantity">
                            <return error="true" message="For outgoing shipments cannot increase quantity above what is on related order items (${increaseRemaining} too many)"/>
                        </if>

                        <if condition="increaseRemaining &amp;&amp; noOrderSisList">
                            <set field="sis" from="noOrderSisList[0]"/>
                            <set field="sis.quantity" from="(sis.quantity ?: 0) + increaseRemaining"/>
                            <set field="sis.quantityNotHandled" from="(sis.quantityNotHandled ?: 0) + increaseRemaining"/>
                            <entity-update value-field="sis"/>

                            <else-if condition="increaseRemaining">
                                <service-call name="create#mantle.shipment.ShipmentItemSource"
                                        in-map="context + [quantity:increaseRemaining, quantityNotHandled:increaseRemaining, statusId:'SisPending']"/>
                            </else-if>
                        </if>
                    </if>
                    <if condition="quantityChange &lt; 0">
                        <!-- quantity reduce, find SIS records with no orderId and update those first, if any left pull from those from orders -->
                        <set field="reduceRemaining" from="-quantityChange"/>
                        <iterate list="noOrderSisList" entry="sis">
                            <set field="currentChange" from="reduceRemaining &gt; (sis.quantityNotHandled?:0) ?
                                    (sis.quantityNotHandled?:0) : reduceRemaining"/>
                            <if condition="currentChange">
                                <set field="sis.quantity" from="(sis.quantity ?: 0) - currentChange"/>
                                <set field="sis.quantityNotHandled" from="(sis.quantityNotHandled ?: 0) - currentChange"/>
                                <if condition="sis.quantity == 0 &amp;&amp; !sis.orderId">
                                    <entity-delete value-field="sis"/>
                                    <else><entity-update value-field="sis"/></else>
                                </if>
                                <set field="reduceRemaining" from="reduceRemaining - currentChange"/>
                                <if condition="reduceRemaining == 0"><break/></if>
                            </if>
                        </iterate>
                        <iterate list="orderSisList" entry="sis">
                            <set field="currentChange" from="reduceRemaining &gt; (sis.quantityNotHandled?:0) ?
                                    (sis.quantityNotHandled?:0) : reduceRemaining"/>
                            <if condition="currentChange">
                                <set field="sis.quantity" from="(sis.quantity ?: 0) - currentChange"/>
                                <set field="sis.quantityNotHandled" from="(sis.quantityNotHandled ?: 0) - currentChange"/>
                                <entity-update value-field="sis"/>
                                <set field="reduceRemaining" from="reduceRemaining - currentChange"/>
                                <if condition="reduceRemaining == 0"><break/></if>
                            </if>
                        </iterate>
                    </if>
                </else>
            </if>
        </actions>
    </service>
    <service verb="ensure" noun="ShipmentItemQuantityRemaining">
        <in-parameters>
            <parameter name="shipmentId" required="true"/><parameter name="productId" required="true"/>
            <parameter name="newQuantityRemaining" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem"/>
            <if condition="shipmentItem">
                <entity-find-one entity-name="mantle.shipment.ShipmentItemDetail" value-field="shipmentItemDetail">
                    <field-map field-name="shipmentId"/><field-map field-name="productId"/>
                </entity-find-one>
                <set field="quantityRemaining" from="shipmentItem.quantity - (shipmentItemDetail.quantityAcceptedTotal ?: 0) - (shipmentItemDetail.quantityRejectedTotal ?: 0)"/>
                <if condition="quantityRemaining &lt; newQuantityRemaining">
                    <set field="incrementQuantity" from="newQuantityRemaining - quantityRemaining"/>
                    <service-call name="mantle.shipment.ShipmentServices.update#ShipmentItem"
                            in-map="[shipmentId:shipmentId, productId:productId,
                                quantity:(shipmentItem.quantity + incrementQuantity)]"/>
                </if>

                <else>
                    <!-- no ShipmentItem at all, create one -->
                    <service-call name="mantle.shipment.ShipmentServices.create#ShipmentItem"
                            in-map="[shipmentId:shipmentId, productId:productId, quantity:newQuantityRemaining]"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ShipmentPackage">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentPackage" include="nonpk"/>
        </in-parameters>
        <out-parameters><parameter name="shipmentPackageSeqId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>

            <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="srsList">
                <econdition field-name="shipmentId"/></entity-find>
            <iterate list="srsList" entry="srs">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                        in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:srs.shipmentRouteSegmentSeqId]"/>
            </iterate>

        </actions>
    </service>

    <!-- ============================================= -->
    <!-- ========== Order Shipment Services ========== -->
    <!-- ============================================= -->

    <service verb="ship" noun="OrderPart">
        <!-- TODO: removed transaction="cache" because of issue related to create of ShipmentItemSource, then
            InventoryItem, then update of SIS to refer to it, causes FK issue as SIS gets created first; TX cache
            needs improvement to handle this (see TODO comment in TransactionCache.update() method) -->
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.shipment.ShipmentServices.create#OrderPartShipment" out-map="context"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId]"/>

            <!-- pack all items (creating ShipmentPackageContent and AssetIssuance records) -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <if condition="orderItem.productId">
                    <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentProduct"
                            in-map="[productId:orderItem.productId, quantity:orderItem.quantity, shipmentId:shipmentId,
                                shipmentPackageSeqId:shipmentPackageSeqId]"/>
                </if>
            </iterate>

            <!-- set Shipment Packed -->
            <service-call name="mantle.shipment.ShipmentServices.pack#Shipment" in-map="[shipmentId:shipmentId]"/>

            <!-- NOTE: check order completed is done as items are packed, so by this point will be completed -->

            <!-- set Shipment Shipped -->
            <service-call name="mantle.shipment.ShipmentServices.ship#Shipment" in-map="[shipmentId:shipmentId]"/>
        </actions>
    </service>

    <service verb="create" noun="OrderPartShipment">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="createPackage" type="Boolean" default="false"/>
            <parameter name="createRouteSegment" type="Boolean" default="true"/>
            <parameter name="originFacilityId"/>
            <parameter name="destinationFacilityId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentPackageSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <!-- is this an outgoing Shipment (use ShpTpSales) or incoming (use ShpTpPurchase) order based on internal org? -->
            <!-- TODO: what to do if both are internal orgs? need a flag or something for which side we're dealing with... -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="orderPart.customerPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <set field="shipmentTypeEnumId" from="customerOrgInternal ? 'ShpTpPurchase' : 'ShpTpSales'"/>

            <if condition="orderPart.facilityId">
                <if condition="customerOrgInternal">
                    <set field="destinationFacilityId" from="destinationFacilityId ?: orderPart.facilityId"/>
                    <else><set field="originFacilityId" from="originFacilityId ?: orderPart.facilityId"/></else>
                </if>
            </if>

            <!-- create Shipment record, get shipmentId -->
            <service-call name="create#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentTypeEnumId:shipmentTypeEnumId, statusId:'ShipInput',
                        fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId]"/>

            <if condition="createPackage">
                <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>
            </if>
            <if condition="createRouteSegment">
                <service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="context"
                        in-map="[shipmentId:shipmentId, carrierPartyId:carrierPartyId,
                            shipmentMethodEnumId:shipmentMethodEnumId,
                            destPostalContactMechId:orderPart.postalContactMechId,
                            destTelecomContactMechId:orderPart.telecomContactMechId,
                            originFacilityId:originFacilityId, destinationFacilityId:destinationFacilityId]"/>
            </if>
            <if condition="shipmentPackageSeqId &amp;&amp; shipmentRouteSegmentSeqId">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                        in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/>
            </if>

            <service-call name="mantle.shipment.ShipmentServices.add#OrderPartToShipment"
                    in-map="[shipmentId:shipmentId, orderId:orderId, orderPartSeqId:orderPartSeqId]"/>
        </actions>
    </service>

    <service verb="add" noun="OrderPartToShipment">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <!-- for each OrderItem in the part create ShipmentItem and ShipmentItemSource records -->
            <entity-find-related value-field="orderPart" relationship-name="mantle.order.OrderItem" list="orderItemList"
                    order-by-list="['orderItemSeqId']"/>
            <iterate list="orderItemList" entry="orderItem">
                <if condition="orderItem.productId">
                    <!-- see if Product is a physical item -->
                    <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                        <field-map field-name="productId" from="orderItem.productId"/></entity-find-one>
                    <set field="productTypeEnum" from="product.'ProductType#moqui.basic.Enumeration'"/>

                    <if condition="productTypeEnum.parentEnumId == 'PtPhysical'">
                        <service-call name="create#mantle.shipment.ShipmentItem"
                                in-map="[shipmentId:shipmentId, productId:orderItem.productId, quantity:orderItem.quantity]"/>
                        <service-call name="create#mantle.shipment.ShipmentItemSource"
                                in-map="[shipmentId:shipmentId, productId:orderItem.productId, statusId:'SisPending',
                                quantity:orderItem.quantity, quantityNotHandled:orderItem.quantity,
                                orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>

                        <!-- for mantle.order.OrderItemBilling set the invoiceId/invoiceItemSeqId on it -->
                        <set field="quantityNotBilled" from="orderItem.quantity"/>
                        <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                            <econdition field-name="orderId"/><econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                        </entity-find>
                        <iterate list="orderItemBillingList" entry="orderItemBilling">
                            <if condition="!orderItemBilling.shipmentId &amp;&amp; quantityNotBilled >= orderItemBilling.quantity">
                                <set field="orderItemBilling.shipmentId" from="shipmentId"/>
                                <entity-update value-field="orderItemBilling"/>
                                <set field="quantityNotBilled" from="quantityNotBilled - orderItemBilling.quantity"/>
                            </if>
                        </iterate>
                        <!-- if quantityNotBilled > 0 do anything here? we don't have another Invoice/Item with quantity to match... -->
                    </if>
                </if>
            </iterate>
        </actions>
    </service>

    <!-- =============================================== -->
    <!-- ========== Shipping/Packing Services ========== -->
    <!-- =============================================== -->

    <service verb="get" noun="ShipmentPickInfo">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="originFacilityId"><description>Defaults to originFacilityId on the first ShipmentRouteSegment</description></parameter>
            <parameter name="locationOrderBy" default-value="facilityId,areaId,aisleId,sectionId,levelId,positionId"/>
            <parameter name="productOrderBy" default-value="pseudoId,productName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="reservedLocationInfoList" type="List"/>
            <parameter name="otherLocationInfoList" type="List"/>
            <!-- reservedLocationInfoList and otherLocationInfoList are List of Maps with:
              - FacilityLocation fields [facilityId, locationTypeEnumId, areaId, aisleId, sectionId, levelId, positionId]
              - GeoPoint fields [latitude, longitude, elevation, elevationUomId]
              - productInfoList - List of Maps with:
                - Product fields (all fields from entity)
                - quantityByBin - Maps with key binLocationNumber (from ShipmentItemSource or Shipment, may be null) and value quantity
            -->
            <parameter name="productInfoList" type="List"/>
            <!-- productInfoList is a List of Maps with:
              - Product fields (all fields from entity)
              - reservedLocationInfoList
                - FacilityLocation fields [facilityId, locationTypeEnumId, areaId, aisleId, sectionId, levelId, positionId]
                - GeoPoint fields [latitude, longitude, elevation, elevationUomId]
                - quantityByBin - Maps with key binLocationNumber (from ShipmentItemSource or Shipment, may be null) and value quantity
              - otherLocationInfoList (same fields as reservedLocationInfoList)
            -->
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>

            <if condition="!originFacilityId">
                <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="shipmentRouteSegmentList">
                    <econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find>
                <set field="originFacilityId" from="shipmentRouteSegmentList ? shipmentRouteSegmentList.first().originFacilityId : null"/>
            </if>

            <set field="productInfoList" from="[]"/>
            <set field="reservedLocationInfoMap" from="[:]"/>
            <set field="otherLocationInfoMap" from="[:]"/>

            <entity-find entity-name="mantle.shipment.ShipmentItem" list="shipmentItemList">
                <econdition field-name="shipmentId"/><order-by field-name="productId"/></entity-find>
            <iterate list="shipmentItemList" entry="shipmentItem">
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="shipmentItem.productId"/></entity-find-one>

                <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="sisList">
                    <econdition field-name="shipmentId" from="shipmentItem.shipmentId"/>
                    <econdition field-name="productId" from="shipmentItem.productId"/>
                </entity-find>

                <set field="productReservedLocationInfoMap" from="[:]"/>
                <set field="productOtherLocationInfoMap" from="[:]"/>
                <iterate list="sisList" entry="sis">
                    <if condition="!sis.quantityNotHandled"><continue/></if>
                    <set field="binLocationNumber" from="sis.binLocationNumber ?: shipment.binLocationNumber"/>

                    <!-- find assets by reservation, if any in place -->
                    <entity-find entity-name="mantle.product.issuance.AssetAndReservation" list="resAssetList">
                        <econdition field-name="orderId" from="sis.orderId"/>
                        <econdition field-name="orderItemSeqId" from="sis.orderItemSeqId"/>
                    </entity-find>
                    <set field="curQuantityNotHandled" from="sis.quantityNotHandled"/>
                    <iterate list="resAssetList" entry="resAsset">
                        <set field="assetLocKey" from="[facilityId:resAsset.facilityId, locationSeqId:resAsset.locationSeqId]"/>

                        <set field="reservedLocationInfo" from="reservedLocationInfoMap.get(assetLocKey)"/>
                        <if condition="!reservedLocationInfo">
                            <set field="reservedLocationInfo" from="[productInfoMap:[:]]"/>
                            <entity-find-one entity-name="mantle.facility.FacilityLocation" value-field="facLoc">
                                <field-map field-name="facilityId" from="resAsset.facilityId"/>
                                <field-map field-name="locationSeqId" from="resAsset.locationSeqId"/>
                            </entity-find-one>
                            <script>if (facLoc) reservedLocationInfo.putAll(facLoc)</script>
                            <if condition="facLoc.geoPointId">
                                <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                                    <field-map field-name="facLoc.geoPointId"/></entity-find-one>
                                <script>if (geoPoint) reservedLocationInfo.putAll(geoPoint)</script>
                            </if>
                            <script>reservedLocationInfoMap.put(assetLocKey, reservedLocationInfo)</script>
                        </if>

                        <set field="productReservedLocationInfo" from="productReservedLocationInfoMap.get(assetLocKey)"/>
                        <if condition="!productReservedLocationInfo">
                            <set field="productReservedLocationInfo" from="[quantityByBin:[:]]"/>
                            <entity-find-one entity-name="mantle.facility.FacilityLocation" value-field="facLoc">
                                <field-map field-name="facilityId" from="resAsset.facilityId"/>
                                <field-map field-name="locationSeqId" from="resAsset.locationSeqId"/>
                            </entity-find-one>
                            <script>if (facLoc) productReservedLocationInfo.putAll(facLoc)</script>
                            <if condition="facLoc.geoPointId">
                                <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                                    <field-map field-name="facLoc.geoPointId"/></entity-find-one>
                                <script>if (geoPoint) productReservedLocationInfo.putAll(geoPoint)</script>
                            </if>
                            <script>productReservedLocationInfoMap.put(assetLocKey, productReservedLocationInfo)</script>
                        </if>

                        <set field="quantityToAdd" from="curQuantityNotHandled > resAsset.quantityNotIssued ? resAsset.quantityNotIssued : curQuantityNotHandled"/>

                        <!-- handle quantity for reservedLocationInfoList -->
                        <set field="reservedProductInfo" from="reservedLocationInfoMap.productInfoMap.get(shipmentItem.productId)"/>
                        <if condition="!reservedProductInfo"><script>
                            reservedProductInfo = [quantityByBin:[:]]
                            reservedProductInfo.putAll(product)
                            reservedLocationInfoMap.productInfoMap.put(shipmentItem.productId, reservedProductInfo)
                        </script></if>
                        <script>StupidUtilities.addToBigDecimalInMap(binLocationNumber, quantityToAdd, reservedProductInfo.quantityByBin)</script>

                        <!-- handle quantity for productInfoList -->
                        <script>StupidUtilities.addToBigDecimalInMap(binLocationNumber, quantityToAdd, productReservedLocationInfo.quantityByBin)</script>

                        <set field="curQuantityNotHandled" from="curQuantityNotHandled - quantityToAdd"/>
                        <if condition="curQuantityNotHandled == 0"><break/></if>
                    </iterate>

                    <!-- find assets more generally for the product, like the reservation algorithm -->
                    <entity-find entity-name="mantle.product.asset.Asset" list="assetList">
                        <econdition field-name="productId"/><econdition field-name="statusId" value="AstAvailable"/>
                        <!-- exclude old, unused Asset records; is not-equals instead of greater so that negative ATP records
                            for not-available reservations will be included and reused -->
                        <econdition field-name="availableToPromiseTotal" operator="not-equals" from="0"/>
                        <econdition field-name="facilityId" from="originFacilityId" ignore-if-empty="true"/>
                        <order-by field-name="receivedDate"/><!-- Ascending by receivedDate, FIFO -->
                    </entity-find>
                    <!-- NOTE: these are alternate locations, reset curQuantityNotHandled for full list of recommened alternatives -->
                    <set field="curQuantityNotHandled" from="sis.quantityNotHandled"/>
                    <iterate list="assetList" entry="asset">
                        <set field="assetLocKey" from="[facilityId:asset.facilityId, locationSeqId:asset.locationSeqId]"/>

                        <set field="otherLocationInfo" from="otherLocationInfoMap.get(assetLocKey)"/>
                        <if condition="!otherLocationInfo">
                            <set field="otherLocationInfo" from="[productInfoMap:[:]]"/>
                            <entity-find-one entity-name="mantle.facility.FacilityLocation" value-field="facLoc">
                                <field-map field-name="facilityId" from="asset.facilityId"/>
                                <field-map field-name="locationSeqId" from="asset.locationSeqId"/>
                            </entity-find-one>
                            <script>if (facLoc) otherLocationInfo.putAll(facLoc)</script>
                            <if condition="facLoc.geoPointId">
                                <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                                    <field-map field-name="facLoc.geoPointId"/></entity-find-one>
                                <script>if (geoPoint) otherLocationInfo.putAll(geoPoint)</script>
                            </if>
                            <script>otherLocationInfoMap.put(assetLocKey, otherLocationInfo)</script>
                        </if>

                        <set field="productOtherLocationInfo" from="productOtherLocationInfoMap.get(assetLocKey)"/>
                        <if condition="!productOtherLocationInfo">
                            <set field="productOtherLocationInfo" from="[quantityByBin:[:]]"/>
                            <entity-find-one entity-name="mantle.facility.FacilityLocation" value-field="facLoc">
                                <field-map field-name="facilityId" from="asset.facilityId"/>
                                <field-map field-name="locationSeqId" from="asset.locationSeqId"/>
                            </entity-find-one>
                            <script>if (facLoc) productOtherLocationInfo.putAll(facLoc)</script>
                            <if condition="facLoc.geoPointId">
                                <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                                    <field-map field-name="facLoc.geoPointId"/></entity-find-one>
                                <script>if (geoPoint) productOtherLocationInfo.putAll(geoPoint)</script>
                            </if>
                            <script>productOtherLocationInfoMap.put(assetLocKey, productOtherLocationInfo)</script>
                        </if>

                        <set field="quantityToAdd" from="curQuantityNotHandled > asset.quantityNotIssued ? asset.quantityNotIssued : curQuantityNotHandled"/>

                        <!-- handle quantity for reservedLocationInfoList -->
                        <set field="productInfo" from="otherLocationInfoMap.productInfoMap.get(shipmentItem.productId)"/>
                        <if condition="!productInfo"><script>
                            productInfo = [quantityByBin:[:]]
                            productInfo.putAll(product)
                            otherLocationInfoMap.productInfoMap.put(shipmentItem.productId, productInfo)
                        </script></if>
                        <script>StupidUtilities.addToBigDecimalInMap(binLocationNumber, quantityToAdd, productInfo.quantityByBin)</script>

                        <!-- handle quantity for productInfoList -->
                        <script>StupidUtilities.addToBigDecimalInMap(binLocationNumber, quantityToAdd, productOtherLocationInfo.quantityByBin)</script>
                        <set field="curQuantityNotHandled" from="curQuantityNotHandled - quantityToAdd"/>
                        <if condition="curQuantityNotHandled == 0"><break/></if>
                    </iterate>
                </iterate>
                <set field="productReservedLocationInfoList" from="new ArrayList(productReservedLocationInfoMap.values())"/>
                <order-map-list list="productReservedLocationInfoList"><order-by field-name="${locationOrderBy}"/></order-map-list>
                <set field="productOtherLocationInfoList" from="new ArrayList(productOtherLocationInfoMap.values())"/>
                <order-map-list list="productOtherLocationInfoList"><order-by field-name="${locationOrderBy}"/></order-map-list>

                <script>
                    productInfo = [reservedLocationInfoList:productReservedLocationInfoList,
                                   otherLocationInfoList:productOtherLocationInfoList]
                    productInfo.putAll(product)
                    productInfoList.add(productInfo)
                </script>
            </iterate>

            <!-- go through reservedLocationInfoMap and otherLocationInfoMap and create productInfoList from productInfoMap, then sort -->
            <iterate list="reservedLocationInfoMap" entry="locationInfo" key="assetLocKey">
                <set field="locationInfo.productInfoList" from="locationInfo.productInfoMap.value()"/>
                <order-map-list list="locationInfo.productInfoList"><order-by field-name="${productOrderBy}"/></order-map-list>
            </iterate>
            <iterate list="otherLocationInfoMap" entry="locationInfo" key="assetLocKey">
                <set field="locationInfo.productInfoList" from="locationInfo.productInfoMap.value()"/>
                <order-map-list list="locationInfo.productInfoList"><order-by field-name="${productOrderBy}"/></order-map-list>
            </iterate>

            <!-- order productInfoList, all that is needed at this point -->
            <order-map-list list="productInfoList"><order-by field-name="${productOrderBy}"/></order-map-list>

            <set field="reservedLocationInfoList" from="new ArrayList(reservedLocationInfoMap.values())"/>
            <order-map-list list="reservedLocationInfoList"><order-by field-name="${locationOrderBy}"/></order-map-list>
            <set field="otherLocationInfoList" from="new ArrayList(otherLocationInfoMap.values())"/>
            <order-map-list list="otherLocationInfoList"><order-by field-name="${locationOrderBy}"/></order-map-list>
        </actions>
    </service>

    <service verb="pack" noun="ShipmentProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
            <parameter name="assetId"><description>Specify to pack a certain asset, may or may not be reserved.</description></parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"/>
            <entity-find-related-one value-field="product" relationship-name="ProductType#moqui.basic.Enumeration"
                    to-value-field="productTypeEnum" cache="true"/>
            <if condition="productTypeEnum.parentEnumId != 'PtPhysical' &amp;&amp; productTypeEnum.enumId != 'PtPhysical'">
                <log level="info" message="Not packing Product [${productId}], type ${productTypeEnum.description} [${productTypeEnum.enumId}] is not a physical product."/>
                <return/>
            </if>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" cache="false">
                <econdition field-name="shipmentId"/><econdition field-name="productId"/>
                <econdition field-name="quantityNotHandled" operator="greater" from="0"/>
            </entity-find>
            <set field="quantityRemaining" from="quantity"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="quantityToPack" from="shipmentItemSource.quantityNotHandled > quantityRemaining ?
                        quantityRemaining : shipmentItemSource.quantityNotHandled"/>
                <set field="quantityRemaining" from="quantityRemaining > shipmentItemSource.quantityNotHandled ?
                        quantityRemaining - shipmentItemSource.quantityNotHandled : 0"/>
                <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentItemSource"
                        in-map="[shipmentItemSourceId:shipmentItemSource.shipmentItemSourceId,
                            shipmentPackageSeqId:shipmentPackageSeqId, quantity:quantityToPack, assetId:assetId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="pack" noun="ShipmentItemSource">
        <description>This is the lowest-level packing service and operates on a single ShipmentItemSource record.</description>
        <in-parameters>
            <parameter name="shipmentItemSourceId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
            <parameter name="assetReservationId"><description>Specify to pack for a single reservation. If specified assetId is ignored.</description></parameter>
            <parameter name="assetId"><description>Specify to pack a certain asset, may or may not be reserved. Packing
                a specific quantity of an asset assumes physical presence of the asset so other reservations are moved
                as needed.</description></parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.ShipmentItemSource" value-field="shipmentItemSource"/>

            <!-- if an assetReservationId is passed make sure it is for the same order item, etc -->
            <if condition="assetReservationId">
                <entity-find-one entity-name="mantle.product.issuance.AssetReservation" value-field="assetReservation"/>
                <if condition="!assetReservation"><return error="true" message="Reservation [${assetReservationId}] not found, not packing"/></if>
                <if condition="shipmentItemSource.orderId != assetReservation.orderId || shipmentItemSource.orderItemSeqId != assetReservation.orderItemSeqId">
                    <return error="true" message="Reservation order item [${assetReservation.orderId}:${assetReservation.orderItemSeqId}] does not match shipment item source order item [${shipmentItemSource.orderId}:${shipmentItemSource.orderItemSeqId}], not packing"/></if>
                <if condition="quantity &gt; assetReservation.quantityNotIssued">
                    <return error="true" message="Quantity specified (${quantity}) is greater than quantity not issued (${assetReservation.quantityNotIssued}) on reservation [${assetReservationId}], not packing"/></if>

                <!-- clear out assetId to make sure it is ignored -->
                <set field="assetId" from="null"/>
            </if>

            <!-- if an assetId is passed make sure it is for the same product, etc -->
            <if condition="assetId">
                <entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset"/>
                <if condition="!asset"><return error="true" message="Asset [${assetId}] not found, not packing"/></if>
                <if condition="shipmentItemSource.productId != asset.productId">
                    <return error="true" message="Asset product [${asset.productId}] is not the same as shipment item product [${shipmentItemSource.productId}], not packing"/></if>
                <if condition="quantity &gt; asset.quantityOnHandTotal">
                    <return error="true" message="Quantity specified (${quantity}) is greater than asset [${assetId}] quantity on hand (${asset.quantityOnHandTotal}), not packing"/></if>

                <!-- handle reservations, moving other reservations as needed to handle current quantity assumed to be physically present -->
                <!-- call displace#AssetReservations -->
                <service-call name="mantle.product.AssetServices.displace#AssetReservations"
                        in-map="[assetId:assetId, orderId:shipmentItemSource.orderId,
                                orderItemSeqId:shipmentItemSource.orderItemSeqId, quantity:quantity]"/>
            </if>

            <!-- create AssetIssuance records based on AssetReservation records if available -->
            <if condition="assetReservation">
                <set field="assetReservationList" from="[assetReservation]"/>

                <else-if condition="!assetReservationList">
                    <entity-find entity-name="mantle.product.issuance.AssetReservation" list="assetReservationList">
                        <econdition field-name="orderId" from="shipmentItemSource.orderId"/>
                        <econdition field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/>
                        <econdition field-name="quantityNotIssued" operator="greater" from="0"/>
                        <econdition field-name="assetId" ignore-if-empty="true"/>
                    </entity-find>
                </else-if>
            </if>

            <set field="quantityRemaining" from="quantity"/>
            <if condition="assetReservationList">
                <!-- issue based on reservations -->
                <iterate list="assetReservationList" entry="assetReservation">
                    <set field="quantityToIssue" from="assetReservation.quantityNotIssued > quantityRemaining ?
                        quantityRemaining : assetReservation.quantityNotIssued"/>
                    <set field="quantityRemaining" from="quantityRemaining > assetReservation.quantityNotIssued ?
                        (quantityRemaining - assetReservation.quantityNotIssued) : 0"/>
                    <service-call name="mantle.product.AssetServices.issue#AssetReservation"
                            in-map="[assetReservation:assetReservation, shipmentId:shipmentItemSource.shipmentId,
                                quantity:quantityToIssue]"/>

                    <!-- if the asset has a shipmentBoxTypeId it is already packaged, so create a package just for it -->
                    <!-- TODO: do something similar if Product is set as already packaged -->
                    <!-- TODO: calculate weight of asset package, or even set on asset record? -->
                    <entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset">
                        <field-map field-name="assetId" from="assetReservation.assetId"/></entity-find-one>
                    <if condition="asset.shipmentBoxTypeId">
                        <service-call name="create#mantle.shipment.ShipmentPackage" out-map="context"
                                in-map="[shipmentId:shipmentItemSource.shipmentId,
                                    shipmentBoxTypeId:asset.shipmentBoxTypeId]"/>
                    </if>
                </iterate>
            </if>

            <if condition="quantityRemaining">
                <!-- do a non-reservation asset issuance -->
                <service-call name="mantle.product.AssetServices.issue#Asset"
                        in-map="[shipmentId:shipmentItemSource.shipmentId, quantity:quantityRemaining, assetId:assetId,
                                orderId:shipmentItemSource.orderId, orderItemSeqId:shipmentItemSource.orderItemSeqId]"/>
            </if>

            <!-- if no shipmentPackageSeqId find the first package -->
            <if condition="!shipmentPackageSeqId">
                <entity-find entity-name="mantle.shipment.ShipmentPackage" list="shipmentPackageList">
                    <econdition field-name="shipmentId" from="shipmentItemSource.shipmentId"/>
                    <order-by field-name="shipmentPackageSeqId"/></entity-find>
                <set field="shipmentPackageSeqId" from="shipmentPackageList?.first?.shipmentPackageSeqId"/>
                <!-- if there is no package don't create one yet, might be using an asset already in a package -->
            </if>
            <!-- if still no shipmentPackageSeqId at this point, create a ShipmentPackage -->
            <if condition="!shipmentPackageSeqId">
                <service-call name="mantle.shipment.ShipmentServices.create#ShipmentPackage" out-map="context"
                        in-map="[shipmentId:shipmentItemSource.shipmentId]"/>
            </if>
            <!-- create ShipmentPackageContent or update if already exists -->
            <entity-find-one entity-name="mantle.shipment.ShipmentPackageContent" value-field="shipmentPackageContent">
                <field-map field-name="shipmentId" from="shipmentItemSource.shipmentId"/>
                <field-map field-name="productId" from="shipmentItemSource.productId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>
            <if condition="shipmentPackageContent">
                <set field="shipmentPackageContent.quantity" from="shipmentPackageContent.quantity + quantity"/>
                <entity-update value-field="shipmentPackageContent"/>

                <else>
                    <service-call name="create#mantle.shipment.ShipmentPackageContent"
                            in-map="[shipmentId:shipmentItemSource.shipmentId, productId:shipmentItemSource.productId,
                                shipmentPackageSeqId:shipmentPackageSeqId, quantity:quantity]"/>
                </else>
            </if>

            <!-- update quantityNotHandled to get ready for the next pack call -->
            <set field="shipmentItemSource.quantityNotHandled" from="shipmentItemSource.quantityNotHandled - quantity"/>
            <if condition="shipmentItemSource.quantityNotHandled &lt;= 0">
                <set field="shipmentItemSource.statusId" value="SisPacked"/>
            </if>
            <entity-update value-field="shipmentItemSource"/>

            <!-- on Shipment Item Packed mark Order as Completed (IF all order part items are completed) -->
            <if condition="shipmentItemSource.orderId &amp;&amp; shipmentItemSource.orderItemSeqId">
                <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem">
                    <field-map field-name="orderId" from="shipmentItemSource.orderId"/>
                    <field-map field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/>
                </entity-find-one>
                <service-call name="mantle.order.OrderServices.checkComplete#OrderPart"
                        in-map="[orderId:orderItem.orderId, orderPartSeqId:orderItem.orderPartSeqId]"/>
            </if>
        </actions>
    </service>

    <!-- ======================================== -->
    <!-- ========== Receiving Services ========== -->
    <!-- ======================================== -->

    <service verb="receive" noun="EntireShipment" transaction="cache">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="facilityId"><description>If not specified uses ShipmentRouteSegment.destinationFacilityId.</description></parameter>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.shipment.ShipmentItemDetail" list="shipmentItemDetailList">
                <econdition field-name="shipmentId"/></entity-find>
            <iterate list="shipmentItemDetailList" entry="sid">
                <set field="quantityRemaining" from="sid.quantity - (sid.quantityAcceptedTotal ?: 0) - (sid.quantityRejectedTotal ?: 0)"/>

                <service-call name="mantle.shipment.ShipmentServices.receive#ShipmentProduct"
                        in-map="[shipmentId:shipmentId, productId:sid.productId,
                            quantityAccepted:quantityRemaining, facilityId:facilityId]"/>
            </iterate>

            <!-- consider doing this automatically when all quantities of all items are received -->
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId:shipmentId, statusId:'ShipDelivered']"/>
        </actions>
    </service>
    <service verb="receive" noun="ShipmentProduct">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>

            <auto-parameters entity-name="mantle.product.asset.Asset" include="nonpk"/>
            <parameter name="productId" required="true"/>
            <parameter name="facilityId"><description>If not specified uses ShipmentRouteSegment.destinationFacilityId.</description></parameter>

            <parameter name="quantityAccepted" type="BigDecimal" required="true"/>
            <parameter name="quantityRejected" type="BigDecimal" default-value="0"/>
            <parameter name="rejectionReasonEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="assetIdList" type="List"/>
        </out-parameters>
        <actions>
            <if condition="!facilityId">
                <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="shipmentRouteSegmentList">
                    <econdition field-name="shipmentId"/><order-by field-name="-shipmentRouteSegmentSeqId"/></entity-find>
                <set field="facilityId" from="shipmentRouteSegmentList?.first?.destinationFacilityId"/>
            </if>
            <if condition="!facilityId"><return error="true" message="Cannot receive Product ${productId} on Shipment ${shipmentId}, no facilityId specified."/></if>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" cache="false">
                <econdition field-name="shipmentId"/><econdition field-name="productId"/>
                <econdition field-name="quantityNotHandled" operator="greater" from="0"/>
            </entity-find>
            <set field="assetIdList" from="[]"/>
            <set field="quantityAcceptedRemaining" from="quantityAccepted"/>
            <set field="quantityRejectedRemaining" from="quantityRejected"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="quantityToAccept" from="shipmentItemSource.quantityNotHandled > quantityAcceptedRemaining ?
                        quantityAcceptedRemaining : shipmentItemSource.quantityNotHandled"/>
                <set field="quantityAcceptedRemaining" from="quantityAcceptedRemaining > shipmentItemSource.quantityNotHandled ?
                        quantityAcceptedRemaining - shipmentItemSource.quantityNotHandled : 0"/>
                <set field="shipmentItemSource.quantityNotHandled" from="shipmentItemSource.quantityNotHandled - quantityToAccept"/>

                <set field="quantityToReject" from="shipmentItemSource.quantityNotHandled > quantityRejectedRemaining ?
                        quantityRejectedRemaining : shipmentItemSource.quantityNotHandled"/>
                <set field="quantityRejectedRemaining" from="quantityRejectedRemaining > shipmentItemSource.quantityNotHandled ?
                        quantityRejectedRemaining - shipmentItemSource.quantityNotHandled : 0"/>
                <set field="shipmentItemSource.quantityNotHandled" from="shipmentItemSource.quantityNotHandled - quantityToReject"/>

                <service-call name="mantle.product.AssetServices.receive#Asset" out-map="receiveAssetOut"
                        in-map="context + [productId:productId, quantity:quantityToAccept, shipmentId:shipmentId,
                            shipmentPackageSeqId:null, orderId:shipmentItemSource.orderId,
                            orderItemSeqId:shipmentItemSource.orderItemSeqId, facilityId:facilityId,
                            quantityRejected:quantityToReject, rejectionReasonEnumId:rejectionReasonEnumId]"/>
                <script>assetIdList.add(receiveAssetOut.assetId)</script>

                <!-- update quantityNotHandled and status -->
                <if condition="shipmentItemSource.quantityNotHandled &lt;= 0">
                    <set field="shipmentItemSource.statusId" value="SisReceived"/>
                </if>
                <entity-update value-field="shipmentItemSource"/>

                <!-- on Shipment Item Received mark Order as Completed (IF all order part items are completed) -->
                <if condition="shipmentItemSource.orderId &amp;&amp; shipmentItemSource.orderItemSeqId">
                    <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem">
                        <field-map field-name="orderId" from="shipmentItemSource.orderId"/>
                        <field-map field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/>
                    </entity-find-one>
                    <service-call name="mantle.order.OrderServices.checkComplete#OrderPart"
                            in-map="[orderId:orderItem.orderId, orderPartSeqId:orderItem.orderPartSeqId]"/>
                </if>
            </iterate>

            <if condition="quantityAcceptedRemaining > 0 || quantityRejectedRemaining > 0">
                <!-- <message>Not sufficient quantity in item source(s) to receive ${quantityAcceptedRemaining} of ${quantityAccepted} accepted or ${quantityRejectedRemaining} of ${quantityRejected} rejected.</message> -->
                <!-- ShipmentItemSource(s) all used up, just receive outside context of an order/etc -->
                <service-call name="mantle.product.AssetServices.receive#Asset" out-map="receiveAssetOut"
                        in-map="context + [productId:productId, quantity:quantityAcceptedRemaining, shipmentId:shipmentId,
                            facilityId:facilityId, quantityRejected:quantityRejectedRemaining, rejectionReasonEnumId:rejectionReasonEnumId]"/>
                <script>assetIdList.add(receiveAssetOut.assetId)</script>
            </if>
        </actions>
    </service>

    <!-- ============================================ -->
    <!-- ========== Misc Shipment Services ========== -->
    <!-- ============================================ -->

    <service verb="convert" noun="ProductBoxQuantity">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="originalQuantity" type="BigDecimal"/>
            <parameter name="shipmentBoxTypeId"/>
            <parameter name="originalQuantityUomId"><description>If not specified uses ShipmentBoxType.capacityUomId</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="originalQuantityUomId"/>
            <parameter name="convertedQuantity" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <if condition="originalQuantity == null">
                <set field="convertedQuantity" from="0"/>
                <return/>
            </if>

            <if condition="shipmentBoxTypeId &amp;&amp; !originalQuantityUomId">
                <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="shipmentBoxType" cache="true"/>
                <set field="originalQuantityUomId" from="shipmentBoxType.capacityUomId"/>
            </if>

            <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"/>
            <if condition="!product?.amountUomId"><return error="true" message="Cannot convert quantity for product [${productId}], no amountUomId found."/></if>

            <service-call name="org.moqui.impl.BasicServices.convert#Uom" out-map="convertQuantityOut"
                    in-map="[uomId:originalQuantityUomId, toUomId:product.amountUomId, amount:originalQuantity]"/>
            <set field="convertedQuantity" from="convertQuantityOut?.convertedAmount ?: 0"/>
        </actions>
    </service>

    <!-- ============================================ -->
    <!-- ========== Status Update Services ========== -->
    <!-- ============================================ -->

    <service verb="pack" noun="Shipment">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId:shipmentId, statusId:'ShipPacked']"/>
        </actions>
    </service>
    <service verb="ship" noun="Shipment">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId:shipmentId, statusId:'ShipShipped']"/>
        </actions>
    </service>

    <!-- ============================================== -->
    <!-- ========== ShipmentContent Services ========== -->
    <!-- ============================================== -->

    <service verb="create" noun="ShipmentContent">
        <in-parameters>
            <auto-parameters entity-name="mantle.shipment.ShipmentContent" include="nonpk">
                <exclude field-name="contentLocation"/></auto-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <out-parameters><parameter name="shipmentContentId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.shipment.ShipmentContent" in-map="context" out-map="context"/>
            <if condition="contentFile != null &amp;&amp; contentFile.size &gt; 0">
                <service-call name="mantle.shipment.ShipmentServices.save#ShipmentContentFile" in-map="context"/></if>
        </actions>
    </service>
    <service verb="update" noun="ShipmentContent">
        <in-parameters>
            <parameter name="shipmentContentId" required="true"/>
            <auto-parameters entity-name="mantle.shipment.ShipmentContent" include="nonpk">
                <exclude field-name="contentLocation"/></auto-parameters>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <actions>
            <if condition="contentFile != null &amp;&amp; contentFile.size &gt; 0">
                <entity-find-one entity-name="mantle.shipment.ShipmentContent" value-field="shipmentContent"/>
                <service-call name="mantle.shipment.ShipmentServices.save#ShipmentContentFile" out-map="context"
                        in-map="context + [shipmentId:shipmentContent.shipmentId, saveContentLocation:false]"/>
            </if>
            <service-call name="update#mantle.shipment.ShipmentContent" in-map="context"/>
        </actions>
    </service>
    <service verb="save" noun="ShipmentContentFile">
        <in-parameters>
            <parameter name="shipmentContentId" required="true"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="saveContentLocation" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters><parameter name="contentLocation"/></out-parameters>
        <actions>
            <set field="filename" from="contentFile.getName()"/>
            <set field="contentRoot" from="ec.user.getPreference('mantle.content.root') ?: 'dbresource://mantle/content'"/>
            <set field="contentLocation" value="${contentRoot}/shipment/${shipmentId}/content_${shipmentContentId}/${filename}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = contentFile.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <if condition="saveContentLocation"><service-call name="update#mantle.shipment.ShipmentContent"
                    in-map="[shipmentContentId:shipmentContentId, contentLocation:contentLocation]"/></if>
        </actions>
    </service>
</services>
