<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <service verb="record" noun="TimeEntry">
        <in-parameters>
            <auto-parameters entity-name="mantle.work.time.TimeEntry" include="nonpk"/>
            <parameter name="partyId" default-value="${ec.user.userAccount.partyId}"/>
            <parameter name="rateTypeEnumId" default-value="RatpStandard"/>
            <parameter name="comments"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timeEntryId"/>
        </out-parameters>
        <actions>
            <!-- calculate hours using fromDate/thruDate/breakHours -->
            <if condition="!hours &amp;&amp; fromDate &amp;&amp; thruDate">
                <set field="hours" from="((thruDate.time - fromDate.time)/(60*60*1000)) - (breakHours ?: 0)"/>
            </if>
            <!-- if empty set default from/thru dates based on hours and current time -->
            <if condition="!thruDate">
                <set field="thruDate" from="ec.l10n.parseTimestamp(ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd HH:mm'), 'yyyy-MM-dd HH:mm')"/>
            </if>
            <if condition="hours &amp;&amp; !fromDate">
                <set field="fromDate" from="new Timestamp((Long) (thruDate.time - (hours*60*60*1000) - (breakHours ? (breakHours*60*60*1000) : 0)))"/>
            </if>

            <!-- what is the party's emplPositionClassId? try WorkEffortParty with task first, then root/project, then try EmplPositionClassParty -->
            <if condition="!emplPositionClassId &amp;&amp; workEffortId">
                <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="taskWorkEffort">
                    <field-map field-name="workEffortId"/></entity-find-one>

                <entity-find entity-name="WorkEffortParty" list="workEffortPartyList">
                    <date-filter valid-date="fromDate"/>
                    <econdition field-name="workEffortId" operator="in"
                            from="[taskWorkEffort.workEffortId, taskWorkEffort.rootWorkEffortId, null]"/>
                    <econdition field-name="partyId"/>
                    <order-by field-name="fromDate"/>
                </entity-find>
                <filter-map-list list="workEffortPartyList" to-list="taskWorkEffortPartyList">
                    <field-map field-name="workEffortId" from="taskWorkEffort.workEffortId"/>
                </filter-map-list>
                <iterate list="taskWorkEffortPartyList" entry="taskWorkEffortParty">
                    <if condition="taskWorkEffortParty.emplPositionClassId">
                        <set field="emplPositionClassId" from="taskWorkEffortParty.emplPositionClassId"/></if>
                </iterate>
                <if condition="!emplPositionClassId">
                    <filter-map-list list="workEffortPartyList" to-list="projectWorkEffortPartyList">
                        <field-map field-name="workEffortId" from="taskWorkEffort.rootWorkEffortId"/>
                    </filter-map-list>
                    <iterate list="projectWorkEffortPartyList" entry="projectWorkEffortParty">
                        <if condition="projectWorkEffortParty.emplPositionClassId">
                            <set field="emplPositionClassId" from="projectWorkEffortParty.emplPositionClassId"/></if>
                    </iterate>
                </if>
            </if>
            <if condition="!emplPositionClassId">
                <!-- look at Employment/EmplPosition for the emplPositionClassId -->
                <entity-find entity-name="mantle.party.PartyRelationship" list="employRelList">
                    <date-filter/><econdition field-name="fromPartyId" from="partyId"/>
                    <econdition field-name="toPartyId" from="partyId"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtEmployee"/>
                </entity-find>
                <if condition="employRelList">
                    <entity-find-one entity-name="mantle.humanres.employment.Employment" value-field="employment">
                        <field-map field-name="partyRelationshipId" from="employRelList[0].partyRelationshipId"/></entity-find-one>
                    <if condition="employment">
                        <set field="emplPosition" from="employment.'mantle.humanres.position.EmplPosition'"/>
                        <set field="emplPositionClassId" from="emplPosition?.emplPositionClassId"/>
                    </if>
                </if>
            </if>
            <!-- look at EmplPositionClassParty for the emplPositionClassId? maybe too generic, better to not filter by
            <if condition="!emplPositionClassId">
                <entity-find entity-name="mantle.humanres.position.EmplPositionClassParty" list="emplPositionClassPartyList">
                    <date-filter/><econdition field-name="partyId" from="timeEntry.partyId"/>
                    <order-by field-name="fromDate"/></entity-find>
                <if condition="emplPositionClassPartyList">
                    <set field="emplPositionClassId" from="emplPositionClassPartyList[0].emplPositionClassId"/></if>
            </if>
             -->
            <!-- at this point if there is no emplPositionClassId we'll consider it null and not applicable -->

            <!-- if clientPartyId not set find from timesheetId or workEffortId -->
            <if condition="!clientPartyId &amp;&amp; timesheetId">
                <entity-find-one entity-name="mantle.work.time.Timesheet" value-field="timesheet"/>
                <set field="clientPartyId" from="timesheet.clientPartyId"/>
            </if>
            <if condition="!clientPartyId &amp;&amp; workEffortId">
                <!-- see if there is a CustomerBillTo associated with the WorkEffort (task) -->
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billToList">
                    <date-filter/><econdition field-name="workEffortId"/>
                    <econdition field-name="roleTypeId" value="CustomerBillTo"/></entity-find>
                <if condition="billToList">
                    <then><set field="clientPartyId" from="billToList[0].partyId"/></then>
                    <else>
                        <!-- see if there is a CustomerBillTo associated with the root (project) -->
                        <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>
                        <if condition="workEffort?.rootWorkEffortId">
                            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="rootBillToList">
                                <date-filter/><econdition field-name="workEffortId" from="workEffort.rootWorkEffortId"/>
                                <econdition field-name="roleTypeId" value="CustomerBillTo"/></entity-find>
                            <if condition="rootBillToList"><set field="clientPartyId" from="rootBillToList[0].partyId"/></if>
                        </if>
                    </else>
                </if>
            </if>

            <service-call name="create#mantle.work.time.TimeEntry" out-map="context" in-map="context"/>
            <service-call name="mantle.work.TimeServices.get#TimeEntryRate" out-map="context" in-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="TimeEntryRate">
        <in-parameters>
            <parameter name="timeEntryId" required="true"/>
            <!-- TODO: where to get currency... project setting? client or internal org setting? -->
            <parameter name="rateCurrencyUomId" default-value="USD"/>
        </in-parameters>
        <out-parameters>
            <parameter name="rateAmountId"/>
            <parameter name="rateAmount"/>
            <parameter name="vendorRateAmountId"/>
            <parameter name="vendorRateAmount"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.time.TimeEntry" value-field="timeEntry" for-update="true"/>

            <if condition="!timeEntry.rateAmountId">
                <service-call name="mantle.work.TimeServices.find#TimeEntryRateAmount" out-map="clientRate"
                        in-map="[timeEntry:timeEntry, ratePurposeEnumId:'RaprClient', rateCurrencyUomId:rateCurrencyUomId]"/>
                <if condition="clientRate.rateAmountId">
                    <set field="timeEntry.rateAmountId" from="clientRate.rateAmountId"/>
                    <set field="rateAmountId" from="clientRate.rateAmountId"/>
                    <set field="rateAmount" from="clientRate.rateAmount"/>
                </if>

                <else>
                    <set field="rateAmountId" from="timeEntry.rateAmountId"/>
                    <set field="rateAmount" from="timeEntry.'mantle.humanres.rate.RateAmount'?.rateAmount"/>
                </else>
            </if>

            <if condition="!timeEntry.vendorRateAmountId">
                <service-call name="mantle.work.TimeServices.find#TimeEntryRateAmount" out-map="vendorRate"
                        in-map="[timeEntry:timeEntry, ratePurposeEnumId:'RaprVendor', rateCurrencyUomId:rateCurrencyUomId]"/>
                <if condition="vendorRate.rateAmountId">
                    <set field="timeEntry.vendorRateAmountId" from="vendorRate.rateAmountId"/>
                    <set field="vendorRateAmountId" from="vendorRate.rateAmountId"/>
                    <set field="vendorRateAmount" from="vendorRate.rateAmount"/>
                </if>

                <else>
                    <set field="vendorRateAmountId" from="timeEntry.vendorRateAmountId"/>
                    <set field="vendorRateAmount" from="timeEntry.'Vendor#mantle.humanres.rate.RateAmount'?.rateAmount"/>
                </else>
            </if>

            <entity-update value-field="timeEntry"/>
            <!-- <log level="warn" message="=============== rateAmountId=${rateAmountId}, rateAmount=${rateAmount}, vendorRateAmountId=${vendorRateAmountId}, vendorRateAmount=${vendorRateAmount}"/> -->
        </actions>
    </service>
    <service verb="find" noun="TimeEntryRateAmount">
        <in-parameters>
            <parameter name="timeEntry" type="EntityValue" required="true"/>
            <parameter name="ratePurposeEnumId" required="true"/>
            <parameter name="rateCurrencyUomId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="rateAmountId"/>
            <parameter name="rateAmount"/>
        </out-parameters>
        <actions>
            <if condition="timeEntry.workEffortId">
                <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="taskWorkEffort">
                    <field-map field-name="workEffortId" from="timeEntry.workEffortId"/></entity-find-one>
            </if>

            <!-- get all possible rates in one query, then do maximal match -->
            <entity-find entity-name="mantle.humanres.rate.RateAmount" list="rateAmountList">
                <date-filter valid-date="timeEntry.fromDate ?: ec.user.nowTimestamp"/>
                <econdition field-name="partyId" from="timeEntry.partyId" or-null="true"/>
                <econditions combine="or">
                    <econdition field-name="workEffortId" from="taskWorkEffort?.workEffortId" ignore-if-empty="true"/>
                    <econdition field-name="workEffortId" from="taskWorkEffort?.rootWorkEffortId" ignore-if-empty="true"/>
                    <econdition field-name="workEffortId" from="null"/>
                </econditions>
                <econdition field-name="emplPositionClassId" from="timeEntry.emplPositionClassId" or-null="true" ignore-if-empty="true"/>
                <econdition field-name="rateTypeEnumId" from="timeEntry.rateTypeEnumId ?: 'RatpStandard'"/>
                <econdition field-name="ratePurposeEnumId"/><!-- this comes from the parameter -->
                <econdition field-name="timePeriodUomId" value="TF_hr"/>
                <econdition field-name="rateCurrencyUomId"/><!-- this comes from the parameter -->
            </entity-find>

            <!-- <log level="warn" message="=============== rateAmountList=${rateAmountList}"/> -->

            <!-- rates associated with the task and party? -->
            <if condition="taskWorkEffort">
                <filter-map-list list="rateAmountList" to-list="partyTaskList">
                    <field-map field-name="workEffortId" from="taskWorkEffort.workEffortId"/>
                    <field-map field-name="partyId" from="timeEntry.partyId"/>
                </filter-map-list>
                <if condition="partyTaskList"><set field="raListToUse" from="partyTaskList"/></if>
                <!-- rates associated with the root/project and party? -->
                <if condition="!raListToUse &amp;&amp; taskWorkEffort.rootWorkEffortId">
                    <filter-map-list list="rateAmountList" to-list="partyProjectList">
                        <field-map field-name="workEffortId" from="taskWorkEffort.rootWorkEffortId"/>
                        <field-map field-name="partyId" from="timeEntry.partyId"/>
                    </filter-map-list>
                    <if condition="partyProjectList"><set field="raListToUse" from="partyProjectList"/></if>
                </if>
            </if>

            <!-- rates associated with the task? -->
            <if condition="!raListToUse &amp;&amp; taskWorkEffort?.workEffortId">
                <filter-map-list list="rateAmountList" to-list="taskList">
                    <field-map field-name="workEffortId" from="taskWorkEffort.workEffortId"/></filter-map-list>
                <if condition="taskList"><set field="raListToUse" from="taskList"/></if>
            </if>
            <!-- rates associated with the root/project? -->
            <if condition="!raListToUse &amp;&amp; taskWorkEffort?.rootWorkEffortId">
                <filter-map-list list="rateAmountList" to-list="projectList">
                    <field-map field-name="workEffortId" from="taskWorkEffort.rootWorkEffortId"/></filter-map-list>
                <if condition="projectList"><set field="raListToUse" from="projectList"/></if>
            </if>

            <!-- no rate yet? get the default rate for the TimeEntry Party -->
            <if condition="!raListToUse">
                <filter-map-list list="rateAmountList" to-list="partyList">
                    <field-map field-name="partyId" from="timeEntry.partyId"/></filter-map-list>
                <if condition="partyList"><set field="raListToUse" from="partyList"/></if>
            </if>

            <!-- no rate yet? get the default rate for the EmplPositionClass -->
            <if condition="!raListToUse &amp;&amp; emplPositionClassId">
                <filter-map-list list="rateAmountList" to-list="emplPositionClassList">
                    <field-map field-name="emplPositionClassId" from="emplPositionClassId"/></filter-map-list>
                <if condition="emplPositionClassList"><set field="raListToUse" from="emplPositionClassList"/></if>
            </if>

            <if condition="raListToUse">
                <set field="rateAmountId" from="raListToUse[0].rateAmountId"/>
                <set field="rateAmount" from="raListToUse[0].rateAmount"/>
            </if>
            <!-- <log level="warn" message="=============== rateAmountId=${rateAmountId}, rateAmount=${rateAmount}"/> -->
        </actions>
    </service>

    <service verb="clear" noun="TimeEntryInvoice">
        <description>Called when an Invoice is cancelled to clear the invoiceId/vendorInvoiceId and related item seq IDs.</description>
        <in-parameters><parameter name="invoiceId"/></in-parameters>
        <actions>
            <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList" for-update="true">
                <econdition field-name="invoiceId"/></entity-find>
            <iterate list="timeEntryList" entry="timeEntry">
                <set field="timeEntry.invoiceId" from="null"/><set field="timeEntry.invoiceItemSeqId" from="null"/>
                <entity-update value-field="timeEntry"/>
            </iterate>
            <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList" for-update="true">
                <econdition field-name="vendorInvoiceId" from="invoiceId"/></entity-find>
            <iterate list="timeEntryList" entry="timeEntry">
                <set field="timeEntry.vendorInvoiceId" from="null"/><set field="timeEntry.vendorInvoiceItemSeqId" from="null"/>
                <entity-update value-field="timeEntry"/>
            </iterate>
        </actions>
    </service>
</services>
