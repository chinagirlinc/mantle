<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.6.xsd">
    <service verb="create" noun="Return">
        <in-parameters>
            <auto-parameters entity-name="mantle.order.return.ReturnHeader" include="nonpk">
                <exclude field-name="visitId"/></auto-parameters>
            <parameter name="vendorPartyId" required="true"/>
            <parameter name="customerPartyId" required="true"/>
            <parameter name="statusId" default-value="ReturnCreated"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <actions>
            <set field="visitId" from="ec.user.visitId"/>
            <service-call name="create#mantle.order.return.ReturnHeader" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="create" noun="ReturnFromOrder">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <auto-parameters entity-name="mantle.order.return.ReturnHeader" include="nonpk">
                <exclude field-name="statusId"/><exclude field-name="customerPartyId"/><exclude field-name="vendorPartyId"/>
                <exclude field-name="entryDate"/><exclude field-name="currencyUomId"/><exclude field-name="visitId"/></auto-parameters>
            <parameter name="statusId" default-value="ReturnCreated"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <out-parameters><parameter name="returnId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <if condition="!orderPart"><return error="true" message="Could not find Order Part [${orderId}:${orderPartSeqId}]"/></if>
            <!-- Ideally order should be completed, but allow Approved and Sent for partially fulfilled orders,
                will check actual fulfillment when adding items -->
            <if condition="!(orderPart.statusId in ['OrderApproved', 'OrderSent', 'OrderCompleted'])">
                <return error="true" message="Order in status ${orderPart.statusId} cannot be returned"/></if>

            <set field="customerPartyId" from="orderPart.customerPartyId"/>
            <set field="vendorPartyId" from="orderPart.vendorPartyId"/>
            <set field="currencyUomId" from="orderHeader.currencyUomId"/>

            <if condition="!destinationFacilityId"><set field="destinationFacilityId" from="orderPart.facilityId"/></if>
            <if condition="!originPostalContactMechId"><set field="originPostalContactMechId" from="orderPart.postalContactMechId"/></if>
            <if condition="!shipmentMethodEnumId"><set field="shipmentMethodEnumId" from="orderPart.shipmentMethodEnumId"/></if>
            <if condition="!carrierPartyId"><set field="carrierPartyId" from="orderPart.carrierPartyId"/></if>
            <if condition="!paymentMethodId">
                <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/></entity-find>
                <iterate list="paymentList" entry="payment"><if condition="payment.paymentMethodId">
                    <set field="paymentMethodId" from="payment.paymentMethodId"/></if></iterate>
            </if>

            <set field="visitId" from="ec.user.visitId"/>
            <service-call name="create#mantle.order.return.ReturnHeader" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="find" noun="ReturnableOrderItems">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="lookBackDays" type="Integer" default="30"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemInfoList" type="List"><parameter name="orderItemInfo" type="Map">
                <parameter name="orderId"/>
                <parameter name="orderItemSeqId"/>
                <parameter name="itemTypeEnumId"/>
                <parameter name="productId"/>
                <parameter name="orderQuantity" type="BigDecimal"/>
                <parameter name="invoiceQuantity" type="BigDecimal"/>
                <parameter name="returnQuantity" type="BigDecimal"/>
                <parameter name="returnableQuantity" type="BigDecimal"/>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>
            <script>
                Calendar lookBackCal = ec.user.nowCalendar()
                lookBackCal.add(Calendar.MONTH, -lookBackDays)
                lookBackTs = new java.sql.Timestamp(lookBackCal.getTimeInMillis())
            </script>

            <!-- Match customerPartyId, vendorPartyId (to OrderPart), include (invoiced items (physical shipped or not); shipped items/quantities), exclude returned -->
            <!-- TODO: test this and make sure query produces correct invoiceQuantity and returnQuantity, have doubts, may need to split into 2 queries -->
            <entity-find entity-name="mantle.order.return.ReturnableOrderItemView" list="returnableItems">
                <econdition field-name="customerPartyId" from="returnHeader.customerPartyId"/>
                <econdition field-name="vendorPartyId" from="returnHeader.vendorPartyId"/>
                <econdition field-name="placedDate" operator="greater-equals" from="lookBackTs"/>
                <econdition field-name="returnStatusId" operator="not-equals" value="ReturnCancelled"/>
                <having-econditions><econdition field-name="invoiceQuantity" operator="greater" to-field-name="returnQuantity"/></having-econditions>
                <select-field field-name="orderId"/><select-field field-name="orderItemSeqId"/>
                <select-field field-name="itemTypeEnumId"/><select-field field-name="productId"/>
                <select-field field-name="quantity"/><select-field field-name="invoiceQuantity"/>
                <select-field field-name="returnQuantity"/>
            </entity-find>

            <set field="orderItemInfoList" from="[]"/>
            <iterate list="returnableItems" entry="returnableItem">
                <set field="returnableQuantity" from="(returnableItem.invoiceQuantity ?: 0) - (returnableItem.returnQuantity ?: 0)"/>
                <if condition="returnableQuantity > 0">
                    <script>orderItemInfoList.add([orderId:returnableItem.orderId, orderItemSeqId:returnableItem.orderItemSeqId,
                               itemTypeEnumId:returnableItem.itemTypeEnumId, productId:returnableItem.productId,
                               orderQuantity:returnableItem.quantity, invoiceQuantity:returnableItem.invoiceQuantity,
                               returnQuantity:returnableItem.returnQuantity, returnableQuantity:returnableQuantity])</script>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="add" noun="OrderItemToReturn">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <auto-parameters entity-name="mantle.order.return.ReturnItem" include="nonpk">
                <exclude field-name="statusId"/><exclude field-name="itemTypeEnumId"/><exclude field-name="productId"/>
                <exclude field-name="returnQuantity"/><exclude field-name="receivedQuantity"/>
                <exclude field-name="replacementOrderId"/><exclude field-name="refundPaymentId"/>
                <exclude field-name="finAccountTransId"/>
                <exclude field-name="responseAmount"/><exclude field-name="responseDate"/></auto-parameters>
            <parameter name="statusId" default-value="ReturnCreated"/>
            <parameter name="returnQuantity" type="BigDecimal" required="true"/>
            <parameter name="returnReasonEnumId" required="true"/>
            <parameter name="returnResponseEnumId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="returnItemId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <if condition="!orderItem"><return error="true" message="Could not find Order Item [${orderId}:${orderItemSeqId}]"/></if>

            <!-- make sure returnQuantity is not greater than returnable amount -->
            <entity-find entity-name="mantle.order.OrderItemBillingQuantity" list="oibqList">
                <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/></entity-find>
            <set field="billedQuantity" from="oibqList ? oibqList[0].quantity : 0"/>
            <entity-find entity-name="mantle.order.return.ReturnItemQuantity" list="riqList">
                <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/>
                <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                <select-field field-name="returnQuantity"/>
            </entity-find>
            <set field="returnedQuantity" from="riqList ? riqList[0].returnQuantity : 0"/>

            <if condition="(returnedQuantity + returnQuantity) &gt; returnableQuantity">
                <return error="true" message="Tried to return more than is returnable; quantity billed: ${billedQuantity}, already returned: ${returnedQuantity}, tried to return: ${returnQuantity}"/></if>

            <set field="itemTypeEnumId" from="orderItem.itemTypeEnumId"/>
            <set field="productId" from="orderItem.productId"/>
            <if condition="!description"><set field="description" from="orderItem.itemDescription"/></if>

            <service-call name="create#mantle.order.return.ReturnItem" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="process" noun="ReturnItemResponses">
        <description>
            Process responses for items with statuses other than Created, Requested, or Cancelled.
            Called by SECA rule on Approved and Received item statuses.
            If ReturnItem.responseImmediate = 'Y' process on Approved status or later (Shipped, Received, Completed).
            If ReturnItem.responseImmediate = 'N' (or null) process on Received status or later (Completed).
            Only processes responses for items with no response already (responseDate != null).
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="returnItemSeqId"><description>If not specified try processing all items</description></parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>

            <!-- make sure customer is not an internal org, ie this is a sales return and not a purchase return -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="returnHeader.customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <if condition="customerOrgInternal"><return message="Cannot process return responses for supplier purchase return"/></if>

            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList" for-update="true">
                <econdition field-name="returnId"/><econdition field-name="returnItemSeqId" ignore-if-empty="true"/></entity-find>
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.responseDate != null"><continue/></if>
                <set field="validStatus" from="returnItem.statusId in ['ReturnReceived', 'ReturnCompleted'] ||
                        (ReturnItem.responseImmediate = 'Y' &amp;&amp; returnItem.statusId in ['ReturnApproved', 'ReturnShipped'])"/>
                <if condition="!validStatus"><continue/></if>

                <!-- calculate amount -->
                <set field="quantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity"/>
                <set field="amount" from="returnItem.responseAmount"/>
                <if condition="amount == null &amp;&amp; returnItem.orderId">
                    <!-- calculate from quantity and OrderItem.unitAmount -->
                    <entity-find-related-one value-field="returnItem" relationship-name="orderItem" to-value-field="orderItem"/>
                    <set field="amount" from="(quantity?:0) * (orderItem.unitAmount?:0)"/>
                </if>

                <if condition="returnItem.returnResponseEnumId == 'RrspCredit'">
                    <then>
                        <if condition="!amount"><return error="true" message="Return Item ${returnId}:${returnItem.returnItemSeqId} has no amount, not processing response"/></if>
                        <!-- this returns finAccountId -->
                        <service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount"
                                in-map="[finAccountTypeId:'CustomerCredit', ownerPartyId:returnHeader.customerPartyId,
                                    organizationPartyId:returnHeader.vendorPartyId]" out-map="context"/>
                        <!-- will set finAccountTransId in context -->
                        <service-call name="mantle.account.FinancialAccountServices.deposit#FinancialAccount" out-map="context"
                                in-map="[finAccountId:finAccountId, reasonEnumId:'FatrRefund', amount:amount]"/>

                        <set field="returnItem.responseAmount" from="amount"/>
                        <set field="returnItem.finAccountTransId" from="finAccountTransId"/>
                    </then>
                    <else-if condition="returnItem.returnResponseEnumId == 'RrspRefund'">
                        <if condition="!amount"><return error="true" message="Return Item ${returnId}:${returnItem.returnItemSeqId} has no amount, not processing response"/></if>

                        <service-call name="mantle.account.PaymentServices.create#Payment" out-map="context"
                            in-map="[paymentTypeEnumId:'PtRefund', statusId:'PmntPromised',
                                fromPartyId:returnHeader.vendorPartyId, toPartyId:returnHeader.customerPartyId,
                                amount:amount, amountUomId:returnHeader.currencyUomId]"/>

                        <set field="returnItem.responseAmount" from="amount"/>
                        <set field="returnItem.refundPaymentId" from="paymentId"/>
                    </else-if>
                    <else-if condition="returnItem.returnResponseEnumId == 'RrspReplace'">
                        <!-- TODO -->
                    </else-if>
                    <!-- NOTE: for RrspManual do nothing -->
                </if>
                <if condition="returnItem.isModified()">
                    <set field="returnItem.responseDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="returnItem"/>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="approve" noun="Return">
        <in-parameters><parameter name="returnId" required="true"/></in-parameters>
        <actions>
            <!-- TODO -->
        </actions>
    </service>
    <service verb="receive" noun="ReturnItem">
        <description>Called per item when return Shipment received</description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="returnItemSeqId" required="true"/>
            <parameter name="receivedQuantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO on receive return shipment update item status to Received; if all items received update header status to Received -->
        </actions>
    </service>
    <service verb="cancel" noun="Return">
        <in-parameters><parameter name="returnId" required="true"/></in-parameters>
        <actions>
            <!-- TODO cancel items not received/sent, reduce quantities and complete if partially received/sent -->
        </actions>
    </service>
    <service verb="cancel" noun="ReturnItem">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="returnItemSeqId" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO cancel items not received/sent, reduce quantities and complete if partially received/sent -->
        </actions>
    </service>

    <!-- ============================================== -->
    <!-- ========== Return Shipment Services ========== -->
    <!-- ============================================== -->

    <service verb="create" noun="ReturnShipment">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="createPackage" type="Boolean" default="false"/>
            <parameter name="createRouteSegment" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>

            <!-- is this an outgoing Shipment (use ShpTpPurchaseReturn) or incoming (use ShpTpSalesReturn) order based on internal org? -->
            <!-- TODO: what to do if both are internal orgs? need a flag or something for which side we're dealing with... -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="returnHeader.customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <set field="shipmentTypeEnumId" from="customerOrgInternal ? 'ShpTpPurchaseReturn' : 'ShpTpSalesReturn'"/>

            <if condition="customerOrgInternal">
                <then>
                    <set field="originFacilityId" from="returnHeader.facilityId"/>
                    <set field="destPostalContactMechId" from="returnHeader.postalContactMechId"/>
                    <set field="destTelecomContactMechId" from="returnHeader.telecomContactMechId"/>
                </then>
                <else>
                    <set field="destinationFacilityId" from="returnHeader.facilityId"/>
                    <set field="originPostalContactMechId" from="returnHeader.postalContactMechId"/>
                    <set field="originTelecomContactMechId" from="returnHeader.telecomContactMechId"/>
                </else>
            </if>

            <!-- create Shipment record, get shipmentId -->
            <service-call name="create#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentTypeEnumId:shipmentTypeEnumId, statusId:'ShipInput',
                        fromPartyId:returnHeader.customerPartyId, toPartyId:returnHeader.vendorPartyId,
                        systemMessageRemoteId:orderHeader.systemMessageRemoteId]"/>

            <if condition="createPackage">
                <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>
            </if>
            <if condition="createRouteSegment">
                <set field="shipmentMethodEnumId" from="returnHeader.shipmentMethodEnumId"/>
                <set field="carrierPartyId" from="returnHeader.carrierPartyId"/>
                <service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="context" in-map="context"/>
            </if>
            <if condition="shipmentPackageSeqId &amp;&amp; shipmentRouteSegmentSeqId">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                        in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/>
            </if>

            <service-call name="mantle.shipment.ShipmentServices.add#ReturnToShipment"
                    in-map="[shipmentId:shipmentId, returnId:returnId]"/>
        </actions>
    </service>
    <service verb="add" noun="ReturnToShipment">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>
            
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.productId">
                    <!-- see if Product is a physical item -->
                    <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                        <field-map field-name="productId" from="returnItem.productId"/></entity-find-one>

                    <if condition="product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse']">
                        <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem">
                            <field-map field-name="shipmentId"/><field-map field-name="productId" from="returnItem.productId"/></entity-find-one>
                        <if condition="shipmentItem">
                            <then>
                                <set field="shipmentItem.quantity" from="shipmentItem.quantity + returnItem.quantity"/>
                                <entity-update value-field="shipmentItem"/>
                            </then>
                            <else>
                                <service-call name="create#mantle.shipment.ShipmentItem"
                                        in-map="[shipmentId:shipmentId, productId:returnItem.productId, quantity:returnItem.quantity]"/>
                            </else>
                        </if>

                        <service-call name="create#mantle.shipment.ShipmentItemSource"
                                in-map="[shipmentId:shipmentId, productId:returnItem.productId, statusId:'SisPending',
                                quantity:returnItem.quantity, quantityNotHandled:returnItem.quantity,
                                returnId:returnItem.returnId, returnItemSeqId:returnItem.returnItemSeqId]"/>

                        <!-- for mantle.order.OrderItemBilling set the invoiceId/invoiceItemSeqId on it -->
                        <set field="quantityNotBilled" from="returnItem.quantity"/>
                        <entity-find entity-name="mantle.order.OrderItemBilling" list="returnItemBillingList">
                            <econdition field-name="returnId"/><econdition field-name="returnItemSeqId" from="returnItem.returnItemSeqId"/>
                        </entity-find>
                        <iterate list="returnItemBillingList" entry="returnItemBilling">
                            <if condition="!returnItemBilling.shipmentId &amp;&amp; quantityNotBilled >= returnItemBilling.quantity">
                                <set field="returnItemBilling.shipmentId" from="shipmentId"/>
                                <entity-update value-field="returnItemBilling"/>
                                <set field="quantityNotBilled" from="quantityNotBilled - returnItemBilling.quantity"/>
                            </if>
                        </iterate>
                        <!-- if quantityNotBilled > 0 do anything here? we don't have another Invoice/Item with quantity to match... -->
                    </if>
                </if>
            </iterate>
            
        </actions>
    </service>
</services>
