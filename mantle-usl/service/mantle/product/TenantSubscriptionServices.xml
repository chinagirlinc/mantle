<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <!-- STATUS: EXPERIMENTAL -->

    <service verb="init" noun="Tenant">
        <implements service="mantle.product.SubscriptionServices.init#SubscriptionResource"/>
        <actions>
            <entity-find-one entity-name="mantle.product.subscription.Subscription" value-field="subscription"/>

            <!-- TODO: how to get parameters for provision tenant, especially tenant ID, admin user, etc when order placed? -->

            <entity-find-one entity-name="moqui.security.UserAccount" value-field="sua">
                <field-map field-name="partyId" from="subscription.subscriberPartyId"/></entity-find-one>

            <set field="tenantMap" from="[tenantId:subscription.subscriberPartyId, hostName:subscription.subscriberPartyId,
                    tenantName:sua.userFullName, dataLoadTypes:'seed']"/>
            <set field="randomPassword" from="StupidUtilities.getRandomString(10) + 'a1!'"/>
            <set field="userMap" from="[username:sua.username, userFullName:sua.userFullName,
                    newPassword:randomPassword, newPasswordVerify:randomPassword,
                    emailAddress:sua.emailAddress, currencyUomId:sua.currencyUomId, locale:sua.locale, timeZone:sua.timeZone]"/>

            <!-- TODO: for now just provisions for the Derby DB, make it configurable somehow, or just customize code to handle it? -->

            <!-- <service-call name="org.moqui.impl.TenantServices.provision#TenantDerby" in-map="tenantMap + userMap" async="true"/> -->
            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.service.ServiceResultWaiter

                ExecutionContext ec = context.ec
                ServiceResultWaiter srw = ec.service.async().name("org.moqui.impl.TenantServices.provision#TenantH2")
                        .parameters(tenantMap + userMap).callWaiter()
                srw.waitForResult()
            </script>
        </actions>
    </service>
    <service verb="revoke" noun="TenantAccess">
        <implements service="mantle.product.SubscriptionServices.revoke#SubscriptionResourceAccess"/>
        <actions>
            <!-- TODO: implement this -->
        </actions>
    </service>
    <service verb="destroy" noun="Tenant">
        <implements service="mantle.product.SubscriptionServices.destroy#SubscriptionResource"/>
        <actions>
            <!-- TODO: implement this -->
        </actions>
    </service>
</services>
