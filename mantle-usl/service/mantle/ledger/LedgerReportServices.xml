<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <service verb="run" noun="BalanceSheet">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="timePeriodIdList" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="currencyUomId"/>
            <parameter name="timePeriodIdMap" type="Map"/>

            <parameter name="assetInfoMap" type="Map"/>
            <parameter name="contraAssetInfoMap" type="Map"/>
            <parameter name="liabilityInfoMap" type="Map"/>
            <parameter name="equityInfoMap" type="Map"/>

            <parameter name="netAssetTotalMap" type="Map"/>
            <parameter name="liabilityEquityTotalMap" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId"/>
            <set field="timePeriodIdMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
                <script>timePeriodIdMap.put(timePeriodId, timePeriod)</script>
            </iterate>

            <set field="commonMap" from="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList]"/>

            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'ASSET']" out-map="assetOut"/>
            <set field="assetInfoMap" from="assetOut.classInfoMap"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'CONTRA_ASSET']" out-map="contraAssetOut"/>
            <set field="contraAssetInfoMap" from="contraAssetOut.classInfoMap"/>

            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'LIABILITY']" out-map="liabilityOut"/>
            <set field="liabilityInfoMap" from="liabilityOut.classInfoMap"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'EQUITY']" out-map="equityOut"/>
            <set field="equityInfoMap" from="equityOut.classInfoMap"/>
            <!-- NOTE: should DISTRIBUTION go here, or somewhere else?
            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'DISTRIBUTION']" out-map="distributionOut"/>
            <set field="distributionInfoMap" from="distributionOut.classInfoMap"/>
            -->

            <set field="netAssetTotalMap" from="[:]"/>
            <set field="liabilityEquityTotalMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <script>
                    BigDecimal netAssetTotal = (assetInfoMap.totalBalanceByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (contraAssetInfoMap.totalBalanceByTimePeriod.get(timePeriodId) ?: 0)
                    netAssetTotalMap.put(timePeriodId, netAssetTotal)

                    BigDecimal liabilityEquityTotal = (liabilityInfoMap.totalBalanceByTimePeriod.get(timePeriodId) ?: 0) +
                                                    (equityInfoMap.totalBalanceByTimePeriod.get(timePeriodId) ?: 0)
                    liabilityEquityTotalMap.put(timePeriodId, liabilityEquityTotal)
                </script>
            </iterate>
        </actions>
    </service>
    <service verb="run" noun="IncomeStatement">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="timePeriodIdList" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="currencyUomId"/>
            <parameter name="timePeriodIdMap" type="Map"/>

            <parameter name="revenueInfoMap" type="Map"/>
            <parameter name="contraRevenueInfoMap" type="Map"/>
            <parameter name="costOfSalesInfoMap" type="Map"/>

            <parameter name="incomeInfoMap" type="Map"/>
            <parameter name="expenseInfoMap" type="Map"/>

            <parameter name="grossProfitOnSalesMap" type="Map"/>
            <parameter name="netOperatingIncomeMap" type="Map"/>
            <parameter name="netIncomeMap" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId"/>
            <set field="timePeriodIdMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
                <script>timePeriodIdMap.put(timePeriodId, timePeriod)</script>
            </iterate>

            <set field="commonMap" from="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList]"/>

            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'REVENUE']" out-map="revenueOut"/>
            <set field="revenueInfoMap" from="revenueOut.classInfoMap"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'CONTRA_REVENUE']" out-map="contraRevenueOut"/>
            <set field="contraRevenueInfoMap" from="contraRevenueOut.classInfoMap"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'COST_OF_SALES']" out-map="costOfSalesOut"/>
            <set field="costOfSalesInfoMap" from="costOfSalesOut.classInfoMap"/>

            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'INCOME']" out-map="incomeOut"/>
            <set field="incomeInfoMap" from="incomeOut.classInfoMap"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                    in-map="commonMap + [glAccountClassEnumId:'EXPENSE']" out-map="expenseOut"/>
            <set field="expenseInfoMap" from="expenseOut.classInfoMap"/>

            <set field="grossProfitOnSalesMap" from="[:]"/>
            <set field="netOperatingIncomeMap" from="[:]"/>
            <set field="netIncomeMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <script>
                    BigDecimal grossProfitOnSales = (revenueInfoMap.totalPostedByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (contraRevenueInfoMap.totalPostedByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (costOfSalesInfoMap.totalPostedByTimePeriod.get(timePeriodId) ?: 0)
                    grossProfitOnSalesMap.put(timePeriodId, grossProfitOnSales)

                    BigDecimal netOperatingIncome = (incomeInfoMap.totalPostedByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (expenseInfoMap.totalPostedByTimePeriod.get(timePeriodId) ?: 0)
                    netOperatingIncomeMap.put(timePeriodId, netOperatingIncome)

                    netIncomeMap.put(timePeriodId, grossProfitOnSales + netOperatingIncome)
                </script>
            </iterate>
        </actions>
    </service>
    <service verb="get" noun="GlAccountClassReportInfo">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="timePeriodIdList" type="List" required="true"/>
            <parameter name="glAccountClassEnumId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="classInfoMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="classEnum">
                <field-map field-name="enumId" from="glAccountClassEnumId"/></entity-find-one>

            <!-- lookup accounts, add to glAccountInfoList, sum up classBalance -->
            <entity-find entity-name="mantle.ledger.report.GlAccountOrgTimePeriodDetail" list="glAccountDetailList">
                <econdition field-name="organizationPartyId"/>
                <econdition field-name="timePeriodId" operator="in" from="timePeriodIdList"/>
                <econdition field-name="glAccountClassEnumId"/>
            </entity-find>
            <set field="balanceByTimePeriod" from="[:]"/>
            <set field="postedByTimePeriod" from="[:]"/>
            <set field="glAccountInfoMap" from="[:]"/>
            <iterate list="glAccountDetailList" entry="glAccountDetail">
                <script>
                    BigDecimal balance = glAccountDetail.endingBalance ?: 0
                    BigDecimal posted = (glAccountDetail.endingBalance ?: 0) - (glAccountDetail.beginningBalance ?: 0)
                    StupidUtilities.addToBigDecimalInMap(glAccountDetail.timePeriodId, balance, balanceByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(glAccountDetail.timePeriodId, posted, postedByTimePeriod)

                    Map glAccountInfo = glAccountInfoMap.get(glAccountDetail.accountCode)
                    if (!glAccountInfo) {
                        glAccountInfo = [accountCode:glAccountDetail.accountCode, accountName:glAccountDetail.accountName,
                                         balanceByTimePeriod:[:], postedByTimePeriod:[:]]
                        glAccountInfoMap.put(glAccountDetail.accountCode, glAccountInfo)
                    }
                    glAccountInfo.balanceByTimePeriod.put(glAccountDetail.timePeriodId, balance)
                    glAccountInfo.postedByTimePeriod.put(glAccountDetail.timePeriodId, posted)
                </script>
            </iterate>
            <set field="glAccountInfoList" from="new ArrayList(glAccountInfoMap.values())"/>
            <order-map-list list="glAccountInfoList"><order-by field-name="accountCode"/></order-map-list>

            <!-- find child classes and recurse... -->
            <set field="childClassInfoList" from="[]"/>
            <set field="childBalanceByTimePeriod" from="[:]"/>
            <set field="childPostedByTimePeriod" from="[:]"/>
            <entity-find entity-name="moqui.basic.Enumeration" list="childEnumList">
                <econdition field-name="parentEnumId" from="glAccountClassEnumId"/></entity-find>
            <iterate list="childEnumList" entry="childEnum">
                <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList,
                            glAccountClassEnumId:childEnum.enumId]" out-map="childOut"/>
                <script>childClassInfoList.add(childOut.classInfoMap)</script>
                <!-- add both the class balance and child balance to current class's child balance -->
                <iterate list="timePeriodIdList" entry="timePeriodId">
                    <script>
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.balanceByTimePeriod[timePeriodId], childBalanceByTimePeriod)
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.childBalanceByTimePeriod[timePeriodId], childBalanceByTimePeriod)
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.postedByTimePeriod[timePeriodId], childPostedByTimePeriod)
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.childPostedByTimePeriod[timePeriodId], childPostedByTimePeriod)
                    </script>
                </iterate>
            </iterate>

            <set field="totalBalanceByTimePeriod" from="[:]"/>
            <set field="totalPostedByTimePeriod" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <script>
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, balanceByTimePeriod[timePeriodId], totalBalanceByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, childBalanceByTimePeriod[timePeriodId], totalBalanceByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, postedByTimePeriod[timePeriodId], totalPostedByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, childPostedByTimePeriod[timePeriodId], totalPostedByTimePeriod)
                </script>
            </iterate>

            <!-- here is the full class info Map for reference in whatever uses the output -->
            <set field="classInfoMap" from="[glAccountClassEnumId:glAccountClassEnumId, className:classEnum.description,
                    balanceByTimePeriod:balanceByTimePeriod, childBalanceByTimePeriod:childBalanceByTimePeriod,
                    postedByTimePeriod:postedByTimePeriod, childPostedByTimePeriod:childPostedByTimePeriod,
                    totalBalanceByTimePeriod:totalBalanceByTimePeriod, totalPostedByTimePeriod:totalPostedByTimePeriod,
                    childClassInfoList:childClassInfoList,
                    glAccountDetailList:glAccountDetailList, glAccountInfoList:glAccountInfoList]"/>
        </actions>
    </service>

    <service verb="run" noun="PostedAmountSummary">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="amountUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resultList" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <if condition="!amountUomId"><set field="amountUomId" from="partyAcctgPreference.baseCurrencyUomId"/></if>

            <set field="accountResultMap" from="[:]"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#PostedAmountSummarySide" out-map="context"
                    in-map="context + [debitCreditFlag:'D']"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#PostedAmountSummarySide" out-map="context"
                    in-map="context + [debitCreditFlag:'C']"/>

            <set field="resultList" from="accountResultMap.values() as List"/>
            <order-map-list list="resultList"><order-by field-name="accountCode"/></order-map-list>
        </actions>
    </service>
    <service verb="get" noun="PostedAmountSummarySide">
        <in-parameters>
            <parameter name="debitCreditFlag" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="amountUomId" required="true"/>
            <parameter name="accountResultMap" type="Map"/>
        </in-parameters>
        <out-parameters><parameter name="accountResultMap" type="Map" required="true"/></out-parameters>
        <actions>
            <if condition="accountResultMap == null"><set field="accountResultMap" from="[:]"/></if>

            <entity-find entity-name="mantle.ledger.report.PostedAmountSummary" list="postedAmountSummaryList">
                <econdition field-name="debitCreditFlag"/>
                <econdition field-name="postedDate" operator="greater-equals" from="fromDate" ignore-if-empty="true"/>
                <econdition field-name="postedDate" operator="less" from="thruDate" ignore-if-empty="true"/>
                <econdition field-name="amountUomId"/><econdition field-name="organizationPartyId"/>
                <select-field field-name="glAccountId"/><select-field field-name="accountName"/>
                <select-field field-name="accountCode"/><select-field field-name="glAccountClassEnumId"/>
                <select-field field-name="amount"/>
            </entity-find>
            <iterate list="postedAmountSummaryList" entry="postedAmountSummary">
                <set field="accountResult" from="accountResultMap.get(postedAmountSummary.glAccountId)"/>
                <if condition="!accountResult">
                    <set field="accountResult" from="[glAccountId:postedAmountSummary.glAccountId,
                        accountName:postedAmountSummary.accountName, accountCode:postedAmountSummary.accountCode,
                        glAccountClassEnumId:postedAmountSummary.glAccountClassEnumId]"/>
                    <script>accountResultMap.put(postedAmountSummary.glAccountId, accountResult)</script>
                </if>
                <if condition="debitCreditFlag == 'D'">
                    <set field="accountResult.debitAmount" from="postedAmountSummary.amount"/>
                    <else><set field="accountResult.creditAmount" from="postedAmountSummary.amount"/></else>
                </if>
            </iterate>
        </actions>
    </service>
</services>
