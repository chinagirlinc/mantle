<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <service verb="run" noun="BalanceSheet">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="timePeriodIdList" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="currencyUomId"/>
            <parameter name="timePeriodIdMap" type="Map"/>
            <parameter name="classInfoById" type="Map"/>

            <parameter name="netAssetTotalMap" type="Map"/>
            <parameter name="liabilityEquityTotalMap" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId"/>
            <set field="timePeriodIdMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
                <script>timePeriodIdMap.put(timePeriodId, timePeriod)</script>
            </iterate>

            <set field="classIdList" from="['ASSET', 'CONTRA_ASSET', 'LIABILITY', 'EQUITY']"/>
            <!-- NOTE: should DISTRIBUTION go here, or somewhere else? -->

            <set field="classInfoById" from="[:]"/>
            <iterate list="classIdList" entry="classId">
                <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList,
                            classInfoById:classInfoById, glAccountClassEnumId:classId]"/>
            </iterate>

            <set field="netAssetTotalMap" from="[:]"/>
            <set field="liabilityEquityTotalMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <script>
                    BigDecimal netAssetTotal = (classInfoById.ASSET.totalBalanceByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (classInfoById.CONTRA_ASSET.totalBalanceByTimePeriod.get(timePeriodId) ?: 0)
                    netAssetTotalMap.put(timePeriodId, netAssetTotal)

                    BigDecimal liabilityEquityTotal = (classInfoById.LIABILITY.totalBalanceByTimePeriod.get(timePeriodId) ?: 0) +
                                                    (classInfoById.EQUITY.totalBalanceByTimePeriod.get(timePeriodId) ?: 0)
                    liabilityEquityTotalMap.put(timePeriodId, liabilityEquityTotal)
                </script>
            </iterate>
        </actions>
    </service>
    <service verb="run" noun="IncomeStatement">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="timePeriodIdList" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="currencyUomId"/>
            <parameter name="timePeriodIdMap" type="Map"/>
            <parameter name="classInfoById" type="Map"/>

            <parameter name="grossProfitOnSalesMap" type="Map"/>
            <parameter name="netOperatingIncomeMap" type="Map"/>
            <parameter name="netIncomeMap" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId"/>
            <set field="timePeriodIdMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
                <script>timePeriodIdMap.put(timePeriodId, timePeriod)</script>
            </iterate>

            <set field="classIdList" from="['REVENUE', 'CONTRA_REVENUE', 'COST_OF_SALES', 'INCOME', 'EXPENSE']"/>
            <!-- NOTE: should DISTRIBUTION go here, or somewhere else? -->

            <set field="classInfoById" from="[:]"/>
            <iterate list="classIdList" entry="classId">
                <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList,
                            classInfoById:classInfoById, glAccountClassEnumId:classId]"/>
            </iterate>

            <set field="grossProfitOnSalesMap" from="[:]"/>
            <set field="netOperatingIncomeMap" from="[:]"/>
            <set field="netIncomeMap" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <script>
                    BigDecimal grossProfitOnSales = (classInfoById.REVENUE.totalPostedByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (classInfoById.CONTRA_REVENUE.totalPostedByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (classInfoById.COST_OF_SALES.totalPostedByTimePeriod.get(timePeriodId) ?: 0)
                    grossProfitOnSalesMap.put(timePeriodId, grossProfitOnSales)

                    BigDecimal netOperatingIncome = (classInfoById.INCOME.totalPostedByTimePeriod.get(timePeriodId) ?: 0) -
                                                    (classInfoById.EXPENSE.totalPostedByTimePeriod.get(timePeriodId) ?: 0)
                    netOperatingIncomeMap.put(timePeriodId, netOperatingIncome)

                    netIncomeMap.put(timePeriodId, grossProfitOnSales + netOperatingIncome)
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="run" noun="CashFlowStatement">
        <implements service="mantle.ledger.LedgerReportServices.run#IncomeStatement"/>
        <out-parameters>
            <!-- net cash flow from
                - operating activities
                  - net income (add; from income statement)
                  - cash from operating activities
                    - TODO these two are in the income statement, include them here?
                      - loss on disposal of assets (subtract)
                      - gain on sale of assets (add)
                    - CONTRA_ASSET (include this?)
                      - accumulated depreciation ACCUM_DEPRECIATION (subtract)
                      - accumulated amortization ACCUM_AMORTIZATION (subtract)
                  - CURRENT_ASSET (end - begin balance) (except CASH_EQUIVALENT?)
                    - accounts receivable ACCOUNTS_RECEIVABLE (add)
                    - prepaid expenses PREPAID_AND_OTHER (add)
                    - accrued interest receivable (add)
                    - inventory assets INVENTORY_ASSET (add)
                  - other assets OTHER_ASSET (add)
                  - CURRENT_LIABILITY (end - begin balance)
                    - accounts payable ACCOUNTS_PAYABLE (subtract)
                    - accrued expenses ACCRUED_EXPENSES (subtract)
                    - accrued interest payable (subtract)
                    - third party holdings THIRD_PARTY_HOLDINGS (subtract)
                - investing activities
                  - change (end - begin balance) in long term assets LONGTERM_ASSET (subtract)
                  - redundant? cash paid for assets (subtract)
                - financing activities
                  - DISTRIBUTION
                    - cash paid for shareholder distributions DIVIDEND (subtract)
                    - return of capital RETURN_OF_CAPITAL (subtract)
                  - EQUITY
                    - cash received from shareholders OWNERS_EQUITY (add)
                    - retained earnings RETAINED_EARNINGS (add)
                  - principal payments on long term debt LONGTERM_LIABILITY, others? (subtract)
                  - proceeds from long term debt (add)
                - cash and equivalents CASH_EQUIVALENT; show change, begin balance, end balance

            -->
            <parameter name="classInfoById" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerReportServices.run#IncomeStatement" in-map="context" out-map="context"/>

            <set field="classIdList" from="[
                    /* Operating Activities */ 'CONTRA_ASSET', 'CURRENT_ASSET', 'OTHER_ASSET', 'CURRENT_LIABILITY',
                    /* Investing Activities */ 'LONGTERM_ASSET',
                    /* Financing Activities */ 'DISTRIBUTION', 'EQUITY', 'LONGTERM_LIABILITY']"/>

            <!-- NOTE: classInfoById used from run#IncomeStatement, contains 'REVENUE', 'CONTRA_REVENUE', 'COST_OF_SALES', 'INCOME', 'EXPENSE' -->
            <iterate list="classIdList" entry="classId">
                <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList,
                            classInfoById:classInfoById, glAccountClassEnumId:classId]"/>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="GlAccountClassReportInfo">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="timePeriodIdList" type="List" required="true"/>
            <parameter name="glAccountClassEnumId" required="true"/>
            <parameter name="classInfoById" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="classInfoMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="classEnum">
                <field-map field-name="enumId" from="glAccountClassEnumId"/></entity-find-one>

            <!-- lookup accounts, add to glAccountInfoList, sum up classBalance -->
            <entity-find entity-name="mantle.ledger.report.GlAccountOrgTimePeriodDetail" list="glAccountDetailList">
                <econdition field-name="organizationPartyId"/>
                <econdition field-name="timePeriodId" operator="in" from="timePeriodIdList"/>
                <econdition field-name="glAccountClassEnumId"/>
            </entity-find>
            <set field="balanceByTimePeriod" from="[:]"/>
            <set field="postedByTimePeriod" from="[:]"/>
            <set field="glAccountInfoMap" from="[:]"/>
            <iterate list="glAccountDetailList" entry="glAccountDetail">
                <script>
                    BigDecimal balance = glAccountDetail.endingBalance ?: 0
                    BigDecimal posted = (glAccountDetail.endingBalance ?: 0) - (glAccountDetail.beginningBalance ?: 0)
                    StupidUtilities.addToBigDecimalInMap(glAccountDetail.timePeriodId, balance, balanceByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(glAccountDetail.timePeriodId, posted, postedByTimePeriod)

                    Map glAccountInfo = glAccountInfoMap.get(glAccountDetail.accountCode)
                    if (!glAccountInfo) {
                        glAccountInfo = [accountCode:glAccountDetail.accountCode, accountName:glAccountDetail.accountName,
                                         balanceByTimePeriod:[:], postedByTimePeriod:[:]]
                        glAccountInfoMap.put(glAccountDetail.accountCode, glAccountInfo)
                    }
                    glAccountInfo.balanceByTimePeriod.put(glAccountDetail.timePeriodId, balance)
                    glAccountInfo.postedByTimePeriod.put(glAccountDetail.timePeriodId, posted)
                </script>
            </iterate>
            <set field="glAccountInfoList" from="new ArrayList(glAccountInfoMap.values())"/>
            <order-map-list list="glAccountInfoList"><order-by field-name="accountCode"/></order-map-list>

            <!-- find child classes and recurse... -->
            <set field="childClassInfoList" from="[]"/>
            <set field="childBalanceByTimePeriod" from="[:]"/>
            <set field="childPostedByTimePeriod" from="[:]"/>
            <entity-find entity-name="moqui.basic.Enumeration" list="childEnumList">
                <econdition field-name="parentEnumId" from="glAccountClassEnumId"/>
                <order-by field-name="description"/>
            </entity-find>
            <iterate list="childEnumList" entry="childEnum">
                <service-call name="mantle.ledger.LedgerReportServices.get#GlAccountClassReportInfo"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodIdList:timePeriodIdList,
                            glAccountClassEnumId:childEnum.enumId]" out-map="childOut"/>
                <script>childClassInfoList.add(childOut.classInfoMap)</script>
                <!-- add both the class balance and child balance to current class's child balance -->
                <iterate list="timePeriodIdList" entry="timePeriodId">
                    <script>
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.balanceByTimePeriod[timePeriodId], childBalanceByTimePeriod)
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.childBalanceByTimePeriod[timePeriodId], childBalanceByTimePeriod)
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.postedByTimePeriod[timePeriodId], childPostedByTimePeriod)
                        StupidUtilities.addToBigDecimalInMap(timePeriodId, childOut.classInfoMap.childPostedByTimePeriod[timePeriodId], childPostedByTimePeriod)
                    </script>
                </iterate>
            </iterate>

            <set field="totalBalanceByTimePeriod" from="[:]"/>
            <set field="totalPostedByTimePeriod" from="[:]"/>
            <iterate list="timePeriodIdList" entry="timePeriodId">
                <script>
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, balanceByTimePeriod[timePeriodId], totalBalanceByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, childBalanceByTimePeriod[timePeriodId], totalBalanceByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, postedByTimePeriod[timePeriodId], totalPostedByTimePeriod)
                    StupidUtilities.addToBigDecimalInMap(timePeriodId, childPostedByTimePeriod[timePeriodId], totalPostedByTimePeriod)
                </script>
            </iterate>

            <!-- here is the full class info Map for reference in whatever uses the output -->
            <set field="classInfoMap" from="[glAccountClassEnumId:glAccountClassEnumId, className:classEnum.description,
                    balanceByTimePeriod:balanceByTimePeriod, childBalanceByTimePeriod:childBalanceByTimePeriod,
                    postedByTimePeriod:postedByTimePeriod, childPostedByTimePeriod:childPostedByTimePeriod,
                    totalBalanceByTimePeriod:totalBalanceByTimePeriod, totalPostedByTimePeriod:totalPostedByTimePeriod,
                    childClassInfoList:childClassInfoList,
                    glAccountDetailList:glAccountDetailList, glAccountInfoList:glAccountInfoList]"/>

            <if condition="classInfoById != null"><script>classInfoById.put(glAccountClassEnumId, classInfoMap)</script></if>
        </actions>
    </service>

    <service verb="run" noun="PostedAmountSummary">
        <in-parameters>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="amountUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resultList" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <if condition="!amountUomId"><set field="amountUomId" from="partyAcctgPreference.baseCurrencyUomId"/></if>

            <set field="accountResultMap" from="[:]"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#PostedAmountSummarySide" out-map="context"
                    in-map="context + [debitCreditFlag:'D']"/>
            <service-call name="mantle.ledger.LedgerReportServices.get#PostedAmountSummarySide" out-map="context"
                    in-map="context + [debitCreditFlag:'C']"/>

            <set field="resultList" from="accountResultMap.values() as List"/>
            <order-map-list list="resultList"><order-by field-name="accountCode"/></order-map-list>
        </actions>
    </service>
    <service verb="get" noun="PostedAmountSummarySide">
        <in-parameters>
            <parameter name="debitCreditFlag" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="amountUomId" required="true"/>
            <parameter name="accountResultMap" type="Map"/>
        </in-parameters>
        <out-parameters><parameter name="accountResultMap" type="Map" required="true"/></out-parameters>
        <actions>
            <if condition="accountResultMap == null"><set field="accountResultMap" from="[:]"/></if>

            <entity-find entity-name="mantle.ledger.report.PostedAmountSummary" list="postedAmountSummaryList">
                <econdition field-name="debitCreditFlag"/>
                <econdition field-name="transactionDate" operator="greater-equals" from="fromDate" ignore-if-empty="true"/>
                <econdition field-name="transactionDate" operator="less-equals" from="thruDate" ignore-if-empty="true"/>
                <econdition field-name="amountUomId"/><econdition field-name="organizationPartyId"/>
                <select-field field-name="glAccountId"/><select-field field-name="accountName"/>
                <select-field field-name="accountCode"/><select-field field-name="glAccountClassEnumId"/>
                <select-field field-name="amount"/>
            </entity-find>
            <iterate list="postedAmountSummaryList" entry="postedAmountSummary">
                <set field="accountResult" from="accountResultMap.get(postedAmountSummary.glAccountId)"/>
                <if condition="!accountResult">
                    <set field="accountResult" from="[glAccountId:postedAmountSummary.glAccountId,
                        accountName:postedAmountSummary.accountName, accountCode:postedAmountSummary.accountCode,
                        glAccountClassEnumId:postedAmountSummary.glAccountClassEnumId]"/>
                    <script>accountResultMap.put(postedAmountSummary.glAccountId, accountResult)</script>
                </if>
                <if condition="debitCreditFlag == 'D'">
                    <set field="accountResult.debitAmount" from="postedAmountSummary.amount"/>
                    <else><set field="accountResult.creditAmount" from="postedAmountSummary.amount"/></else>
                </if>
            </iterate>
        </actions>
    </service>
</services>
