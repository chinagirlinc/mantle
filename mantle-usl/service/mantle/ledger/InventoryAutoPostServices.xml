<?xml version="1.0" encoding="UTF-8"?>
<!--
This is free and unencumbered software released into the public domain.
For specific language governing permissions and limitations refer to
the LICENSE.md file or http://unlicense.org
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="post" noun="AssetReceipt">
        <description>This is for posting Inventory/COGS transaction and runs when assetTypeEnumId == AstTpInventory only.</description>
        <in-parameters><parameter name="assetReceiptId" required="true"/></in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.receipt.AssetReceipt" value-field="assetReceipt"/>
            <if condition="!assetReceipt"><return error="true" message="Not posting Inventory transaction, could not find Asset Receipt with ID [${assetReceiptId}]"/></if>
            <set field="asset" from="assetReceipt.'mantle.product.asset.Asset'"/>
            <set field="organizationPartyId" from="asset.ownerPartyId"/>

            <!-- if this is not an inventory Asset don't post a COGS/etc TX -->
            <if condition="asset.assetTypeEnumId != 'AstTpInventory'"><return/></if>

            <if condition="asset.acquireCost == null">
                <log level="info" message="Not posting Asset Receipt [${assetReceiptId}], Asset has no acquireCost"/>
                <return/>
            </if>

            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="papOut"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <set field="partyAcctgPreference" from="papOut.partyAcctgPreference"/>
            <!-- if no preference we shouldn't post anything -->
            <if condition="!partyAcctgPreference">
                <log level="info" message="Not posting Asset Receipt [${assetReceiptId}], could not find PartyAcctgPreference for Owner Party [${organizationPartyId}]"/>
                <return/>
            </if>

            <set field="amount" from="(assetReceipt.quantityAccepted ?: 1) * asset.acquireCost"/>

            <service-call name="create#mantle.ledger.transaction.AcctgTrans" out-map="context"
                    in-map="[acctgTransTypeEnumId:'AttInventoryReceipt', organizationPartyId:organizationPartyId,
                        transactionDate:ec.user.nowTimestamp, isPosted:'N', glFiscalTypeEnumId:'GLFT_ACTUAL',
                        otherPartyId:null, amountUomId:asset.acquireCostUomId, assetReceiptId:assetReceiptId,
                        assetId:asset.assetId]"/>
            <!-- note: could populate invoiceId, etc... but should we? for now no -->

            <set field="useErrorJournal" from="false"/>
            <!-- Credit to COGS_ACCOUNT -->
            <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="creditGlAccountOut"
                    in-map="[glAccountTypeEnumId:'COGS_ACCOUNT', acctgTransTypeEnumId:'AttInventoryReceipt',
                        organizationPartyId:organizationPartyId, otherPartyId:null]"/>
            <if condition="!creditGlAccountOut.glAccountId"><set field="useErrorJournal" from="true"/></if>
            <service-call name="create#mantle.ledger.transaction.AcctgTransEntry"
                    in-map="[acctgTransId:acctgTransId, debitCreditFlag:'C', glAccountTypeEnumId:'COGS_ACCOUNT',
                        glAccountId:creditGlAccountOut.glAccountId, amount:amount, productId:asset.productId,
                        reconcileStatusId:'AES_NOT_RECONCILED', isSummary:'N']"/>
            <!-- Debit to INVENTORY_ACCOUNT -->
            <!-- future TODO: support sub-accounts including RAWMAT_INVENTORY, WIP_INVENTORY, FG_INVENTORY -->
            <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="debitGlAccountOut"
                    in-map="[glAccountTypeEnumId:'INVENTORY_ACCOUNT', acctgTransTypeEnumId:'AttInventoryReceipt',
                        organizationPartyId:organizationPartyId, otherPartyId:null]"/>
            <if condition="!debitGlAccountOut.glAccountId"><set field="useErrorJournal" from="true"/></if>
            <service-call name="create#mantle.ledger.transaction.AcctgTransEntry"
                    in-map="[acctgTransId:acctgTransId, debitCreditFlag:'D', glAccountTypeEnumId:'INVENTORY_ACCOUNT',
                        glAccountId:debitGlAccountOut.glAccountId, amount:amount, productId:asset.productId,
                        reconcileStatusId:'AES_NOT_RECONCILED', isSummary:'N']"/>

            <if condition="useErrorJournal">
                <!-- put in the error journal for the org -->
                <if condition="partyAcctgPreference?.errorGlJournalId">
                    <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId:acctgTransId, glJournalId:partyAcctgPreference.errorGlJournalId]"/>
                </if>

                <else>
                    <!-- call the post service -->
                    <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans" in-map="[acctgTransId:acctgTransId]"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="post" noun="AssetIssuance">
        <in-parameters><parameter name="assetIssuanceId" required="true"/></in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.issuance.AssetIssuance" value-field="assetIssuance"/>
            <set field="asset" from="assetIssuance.'mantle.product.asset.Asset'"/>
            <set field="organizationPartyId" from="asset.ownerPartyId"/>

            <if condition="asset.acquireCost == null">
                <log level="info" message="Not posting Asset Issuance [${assetIssuanceId}], Asset has no acquireCost"/>
                <return/>
            </if>

            <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="papOut"
                    in-map="[organizationPartyId:organizationPartyId]"/>
            <set field="partyAcctgPreference" from="papOut.partyAcctgPreference"/>
            <!-- if no preference we shouldn't post anything -->
            <if condition="!partyAcctgPreference">
                <log level="info" message="Not posting Asset Issuance [${assetIssuanceId}], could not find PartyAcctgPreference for Owner Party [${organizationPartyId}]"/>
                <return/>
            </if>

            <set field="amount" from="(assetIssuance.quantity ?: 1) * asset.acquireCost"/>

            <service-call name="create#mantle.ledger.transaction.AcctgTrans" out-map="context"
                    in-map="[acctgTransTypeEnumId:'AttInventoryIssuance', organizationPartyId:organizationPartyId,
                        transactionDate:ec.user.nowTimestamp, isPosted:'N', glFiscalTypeEnumId:'GLFT_ACTUAL',
                        otherPartyId:null, amountUomId:asset.acquireCostUomId, assetIssuanceId:assetIssuanceId,
                        assetId:asset.assetId]"/>
            <!-- note: could populate invoiceId, etc... but should we? for now no -->

            <set field="useErrorJournal" from="false"/>
            <!-- Credit to INVENTORY_ACCOUNT -->
            <!-- future TODO: support sub-accounts including RAWMAT_INVENTORY, WIP_INVENTORY, FG_INVENTORY -->
            <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="creditGlAccountOut"
                    in-map="[glAccountTypeEnumId:'INVENTORY_ACCOUNT', acctgTransTypeEnumId:'AttInventoryIssuance',
                        organizationPartyId:organizationPartyId, otherPartyId:null]"/>
            <if condition="!creditGlAccountOut.glAccountId"><set field="useErrorJournal" from="true"/></if>
            <service-call name="create#mantle.ledger.transaction.AcctgTransEntry"
                    in-map="[acctgTransId:acctgTransId, debitCreditFlag:'C', glAccountTypeEnumId:'INVENTORY_ACCOUNT',
                        glAccountId:creditGlAccountOut.glAccountId, amount:amount, productId:asset.productId,
                        reconcileStatusId:'AES_NOT_RECONCILED', isSummary:'N']"/>
            <!-- Debit to COGS_ACCOUNT -->
            <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="debitGlAccountOut"
                    in-map="[glAccountTypeEnumId:'COGS_ACCOUNT', acctgTransTypeEnumId:'AttInventoryIssuance',
                        organizationPartyId:organizationPartyId, otherPartyId:null]"/>
            <if condition="!debitGlAccountOut.glAccountId"><set field="useErrorJournal" from="true"/></if>
            <service-call name="create#mantle.ledger.transaction.AcctgTransEntry"
                    in-map="[acctgTransId:acctgTransId, debitCreditFlag:'D', glAccountTypeEnumId:'COGS_ACCOUNT',
                        glAccountId:debitGlAccountOut.glAccountId, amount:amount, productId:asset.productId,
                        reconcileStatusId:'AES_NOT_RECONCILED', isSummary:'N']"/>

            <if condition="useErrorJournal">
                <!-- put in the error journal for the org -->
                <if condition="partyAcctgPreference?.errorGlJournalId">
                    <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId:acctgTransId, glJournalId:partyAcctgPreference.errorGlJournalId]"/>
                </if>

                <else>
                    <!-- call the post service -->
                    <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans" in-map="[acctgTransId:acctgTransId]"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="revert" noun="AssetIssuanceOnCancel">
        <in-parameters>
            <parameter name="assetIssuanceId" required="true"/>
            <parameter name="cancelledQuantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- there should just be one AcctgTrans for this invoice, if there is more than one may already be cancelled -->
            <entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="acctgTransList">
                <econdition field-name="assetIssuanceId"/>
                <econdition field-name="acctgTransTypeEnumId" value="AttInventoryIssuance"/>
            </entity-find>
            <if condition="acctgTransList">
                <if condition="acctgTransList.size() == 1">
                    <service-call name="mantle.ledger.LedgerServices.post#ReverseAcctgTrans"
                            in-map="[acctgTransId:acctgTransList.first.acctgTransId]"/>

                    <else><return error="true" message="Found more than one accounting transaction for Asset Issuance ${assetIssuanceId}, may already be reversed, not posting reverse transaction."/></else>
                </if>
                <else><return error="true" message="No accounting transaction found for Asset Issuance ${assetIssuanceId}, not posting reverse transaction."/></else>
            </if>
        </actions>
    </service>
    <service verb="post" noun="AssetCostChange">
        <in-parameters>
            <parameter name="assetId" required="true"/>
            <parameter name="assetDetailSeqId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="post" noun="AssetOwnerChange">
        <in-parameters>
            <parameter name="assetId" required="true"/>
            <parameter name="oldOwnerPartyId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="post" noun="PhysicalInventoryVariance">
        <in-parameters><parameter name="physicalInventoryId" required="true"/></in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="post" noun="WorkEffortAssetIssuance">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="assetId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- TODO: needed? just use post#AssetIssuance... -->
        </actions>
    </service>
    <service verb="post" noun="WorkEffortInventoryProduced">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="assetId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="post" noun="AssetMaintenanceIssuance">
        <in-parameters><parameter name="assetIssuanceId" required="true"/></in-parameters>
        <out-parameters><parameter name="acctgTransId"/></out-parameters>
        <actions>
            <!-- TODO: needed? just use post#AssetIssuance... -->
        </actions>
    </service>
</services>
