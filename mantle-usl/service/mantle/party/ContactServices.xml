<?xml version="1.0" encoding="UTF-8"?>
<!--
This is free and unencumbered software released into the public domain.
For specific language governing permissions and limitations refer to
the LICENSE.md file or http://unlicense.org
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="get" noun="PartyContactInfo">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="postalContactMechId"/>
            <parameter name="postalContactMechPurposeId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="telecomContactMechPurposeId"/>
            <parameter name="emailContactMechId"/>
            <parameter name="emailContactMechPurposeId"/>
            <parameter name="otherContactMechId"/>
            <parameter name="otherContactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="postalContactMechId"/>
            <parameter name="postalContactMech" type="EntityValue"/>
            <parameter name="postalContactMechPurposeId"/>
            <parameter name="postalAddress" type="EntityValue"/>
            <parameter name="postalAddressStateGeo" type="EntityValue"/>
            <parameter name="postalAddressCountryGeo" type="EntityValue"/>
            <parameter name="postalAddressGeoPoint" type="EntityValue"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="telecomContactMech" type="EntityValue"/>
            <parameter name="telecomContactMechPurposeId"/>
            <parameter name="telecomNumber" type="EntityValue"/>
            <parameter name="emailContactMechId"/>
            <parameter name="emailContactMech" type="EntityValue"/>
            <parameter name="emailContactMechPurposeId"/>
            <parameter name="emailAddress"/>
            <parameter name="otherContactMechId"/>
            <parameter name="otherContactMech" type="EntityValue"/>
            <parameter name="otherContactMechPurposeId"/>
            <parameter name="otherInfoString"/>
        </out-parameters>
        <actions>
            <if condition="postalContactMechPurposeId || postalContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="postalPcmList">
                    <date-filter/>
                    <econdition field-name="partyId"/>
                    <econdition field-name="contactMechId" from="postalContactMechId" ignore-if-empty="true"/>
                    <econdition field-name="contactMechPurposeId" from="postalContactMechPurposeId" ignore-if-empty="true"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="postalPcmList">
                    <set field="postalContactMechId" from="postalPcmList[0].contactMechId"/>
                    <set field="postalContactMechPurposeId" from="postalPcmList[0].contactMechPurposeId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="postalContactMech">
                        <field-map field-name="contactMechId" from="postalContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                        <field-map field-name="contactMechId" from="postalContactMechId"/>
                    </entity-find-one>
                </if>
                <entity-find-related-one value-field="postalAddress" relationship-name="StateProvince#moqui.basic.Geo" to-value-field="postalAddressStateGeo"/>
                <entity-find-related-one value-field="postalAddress" relationship-name="Country#moqui.basic.Geo" to-value-field="postalAddressCountryGeo"/>
                <entity-find-related-one value-field="postalAddress" relationship-name="moqui.basic.GeoPoint" to-value-field="postalAddressGeoPoint"/>
            </if>

            <if condition="telecomContactMechPurposeId || telecomContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="telecomPcmList">
                    <date-filter/>
                    <econdition field-name="partyId"/>
                    <econdition field-name="contactMechId" from="telecomContactMechId" ignore-if-empty="true"/>
                    <econdition field-name="contactMechPurposeId" from="telecomContactMechPurposeId" ignore-if-empty="true"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="telecomPcmList">
                    <set field="telecomContactMechId" from="telecomPcmList[0].contactMechId"/>
                    <set field="telecomContactMechPurposeId" from="telecomPcmList[0].contactMechPurposeId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="telecomContactMech">
                        <field-map field-name="contactMechId" from="telecomContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber">
                        <field-map field-name="contactMechId" from="telecomContactMechId"/>
                    </entity-find-one>
                </if>
            </if>
            <if condition="!telecomContactMech &amp;&amp; postalAddress?.telecomContactMechId">
                <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="telecomContactMech">
                    <field-map field-name="contactMechId" from="postalAddress.telecomContactMechId"/>
                </entity-find-one>
                <set field="telecomContactMechId" from="telecomContactMech.contactMechId"/>
                <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber">
                    <field-map field-name="contactMechId" from="telecomContactMechId"/>
                </entity-find-one>
            </if>

            <if condition="emailContactMechPurposeId || emailContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="emailPcmList">
                    <date-filter/>
                    <econdition field-name="partyId"/>
                    <econdition field-name="contactMechId" from="emailContactMechId" ignore-if-empty="true"/>
                    <econdition field-name="contactMechPurposeId" from="emailContactMechPurposeId" ignore-if-empty="true"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="emailPcmList">
                    <set field="emailContactMechId" from="emailPcmList[0].contactMechId"/>
                    <set field="emailContactMechPurposeId" from="emailPcmList[0].contactMechPurposeId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="emailContactMech">
                        <field-map field-name="contactMechId" from="emailContactMechId"/>
                    </entity-find-one>
                    <set field="emailAddress" from="emailContactMech.infoString"/>
                </if>
            </if>
            <if condition="!emailContactMech &amp;&amp; postalAddress?.emailContactMechId">
                <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="emailContactMech">
                    <field-map field-name="contactMechId" from="postalAddress.emailContactMechId"/>
                </entity-find-one>
                <set field="emailContactMechId" from="emailContactMech.contactMechId"/>
                <set field="emailAddress" from="emailContactMech.infoString"/>
            </if>

            <if condition="otherContactMechPurposeId || otherContactMechId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="otherPcmList">
                    <date-filter/>
                    <econdition field-name="partyId"/>
                    <econdition field-name="contactMechId" from="otherContactMechId" ignore-if-empty="true"/>
                    <econdition field-name="contactMechPurposeId" from="otherContactMechPurposeId" ignore-if-empty="true"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="otherPcmList">
                    <set field="otherContactMechId" from="otherPcmList[0].contactMechId"/>
                    <set field="otherContactMechPurposeId" from="otherPcmList[0].contactMechPurposeId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="otherContactMech">
                        <field-map field-name="contactMechId" from="otherContactMechId"/>
                    </entity-find-one>
                    <set field="otherInfoString" from="otherContactMech.infoString"/>
                </if>
            </if>
            <!-- <log level="warn" message="get#PartyContactInfo finish context=${context.context}"/> -->
        </actions>
    </service>
    <service verb="get" noun="PartyContactInfoList">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="postalContactMechPurposeId"/>
            <parameter name="telecomContactMechPurposeId"/>
            <parameter name="emailContactMechPurposeId"/>
            <parameter name="getAll" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="postalAddressList" type="List"><parameter name="infoMap">
                <parameter name="postalContactMechId"/>
                <parameter name="postalContactMech" type="EntityValue"/>
                <parameter name="postalContactMechPurposeId"/>
                <parameter name="postalContactMechPurpose" type="EntityValue"/>
                <parameter name="postalAddress" type="EntityValue"/>
                <parameter name="postalAddressCountryGeo" type="EntityValue"/>
                <parameter name="postalAddressStateGeo" type="EntityValue"/>
                <parameter name="postalAddressGeoPoint" type="EntityValue"/>
                <parameter name="telecomContactMechId"/>
                <parameter name="telecomContactMech" type="EntityValue"/>
                <parameter name="telecomNumber" type="EntityValue"/>
                <parameter name="emailContactMechId"/>
                <parameter name="emailContactMech" type="EntityValue"/>
                <parameter name="emailAddress"/>
            </parameter></parameter>
            <parameter name="telecomNumberList" type="List"><parameter name="infoMap">
                <parameter name="telecomContactMechId"/>
                <parameter name="telecomContactMech" type="EntityValue"/>
                <parameter name="telecomContactMechPurposeId"/>
                <parameter name="telecomContactMechPurpose" type="EntityValue"/>
                <parameter name="telecomNumber" type="EntityValue"/>
            </parameter></parameter>
            <parameter name="emailAddressList" type="List"><parameter name="infoMap">
                <parameter name="emailContactMechId"/>
                <parameter name="emailContactMech" type="EntityValue"/>
                <parameter name="emailContactMechPurposeId"/>
                <parameter name="emailContactMechPurpose" type="EntityValue"/>
                <parameter name="emailAddress"/>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <if condition="postalContactMechPurposeId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="postalPcmList">
                    <date-filter/><econdition field-name="partyId"/>
                    <econdition field-name="contactMechPurposeId" from="postalContactMechPurposeId"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <else-if condition="getAll">
                    <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="postalPcmList">
                        <date-filter/><econdition field-name="partyId"/>
                        <econdition field-name="contactMechTypeEnumId" value="CmtPostalAddress"/>
                        <order-by field-name="-fromDate"/>
                    </entity-find>
                </else-if>
            </if>
            <if condition="postalPcmList">
                <set field="postalAddressList" from="[]"/>
                <iterate list="postalPcmList" entry="postalPcm">
                    <set field="postalContactMechId" from="postalPcm.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="postalContactMech">
                        <field-map field-name="contactMechId" from="postalContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                        <field-map field-name="contactMechId" from="postalContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.ContactMechPurpose" value-field="postalContactMechPurpose">
                        <field-map field-name="contactMechPurposeId" from="postalPcm.contactMechPurposeId"/>
                    </entity-find-one>
                    <entity-find-related-one value-field="postalAddress" relationship-name="StateProvince#moqui.basic.Geo" to-value-field="postalAddressStateGeo"/>
                    <entity-find-related-one value-field="postalAddress" relationship-name="Country#moqui.basic.Geo" to-value-field="postalAddressCountryGeo"/>
                    <entity-find-related-one value-field="postalAddress" relationship-name="moqui.basic.GeoPoint" to-value-field="postalAddressGeoPoint"/>

                    <if condition="postalAddress.telecomContactMechId">
                        <set field="telecomContactMechId" from="postalAddress.telecomContactMechId"/>
                        <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="telecomContactMech">
                            <field-map field-name="contactMechId" from="telecomContactMechId"/>
                        </entity-find-one>
                        <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber">
                            <field-map field-name="contactMechId" from="telecomContactMechId"/>
                        </entity-find-one>
                    </if>
                    <if condition="postalAddress.emailContactMechId">
                        <set field="emailContactMechId" from="postalAddress.emailContactMechId"/>
                        <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="emailContactMech">
                            <field-map field-name="contactMechId" from="emailContactMechId"/>
                        </entity-find-one>
                    </if>

                    <set field="postalAddressInfo" from="[postalContactMechId:postalContactMechId, postalContactMech:postalContactMech,
                            postalContactMechPurposeId:postalPcm.contactMechPurposeId, postalContactMechPurpose:postalContactMechPurpose,
                            postalAddress:postalAddress, postalAddressStateGeo:postalAddressStateGeo,
                            postalAddressCountryGeo:postalAddressCountryGeo, postalAddressGeoPoint:postalAddressGeoPoint,
                            telecomContactMechId:telecomContactMechId, telecomContactMech:telecomContactMech, telecomNumber:telecomNumber,
                            emailContactMechId:emailContactMechId, emailContactMech:emailContactMech, emailAddress:emailContactMech?.infoString]"/>
                    <script>postalAddressList.add(postalAddressInfo)</script>
                </iterate>
            </if>

            <if condition="telecomContactMechPurposeId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="telecomPcmList">
                    <date-filter/><econdition field-name="partyId"/>
                    <econdition field-name="contactMechPurposeId" from="telecomContactMechPurposeId"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <else-if condition="getAll">
                    <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="telecomPcmList">
                        <date-filter/><econdition field-name="partyId"/>
                        <econdition field-name="contactMechTypeEnumId" value="CmtTelecomNumber"/>
                        <order-by field-name="-fromDate"/>
                    </entity-find>
                </else-if>
            </if>
            <if condition="telecomPcmList">
                <set field="telecomNumberList" from="[]"/>
                <iterate list="telecomPcmList" entry="telecomPcm">
                    <set field="telecomContactMechId" from="telecomPcm.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="telecomContactMech">
                        <field-map field-name="contactMechId" from="telecomContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber">
                        <field-map field-name="contactMechId" from="telecomContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.ContactMechPurpose" value-field="telecomContactMechPurpose">
                        <field-map field-name="contactMechPurposeId" from="telecomPcm.contactMechPurposeId"/>
                    </entity-find-one>
                    <set field="telecomNumberInfo" from="[telecomContactMechId:telecomContactMechId, telecomContactMechId:telecomContactMechId,
                            telecomContactMechPurposeId:telecomPcm.contactMechPurposeId, telecomContactMechPurpose:telecomContactMechPurpose,
                            telecomNumber:telecomNumber]"/>
                    <script>telecomNumberList.add(telecomNumberInfo)</script>
                </iterate>
            </if>

            <if condition="emailContactMechPurposeId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="emailPcmList">
                    <date-filter/><econdition field-name="partyId"/>
                    <econdition field-name="contactMechPurposeId" from="emailContactMechPurposeId"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <else-if condition="getAll">
                    <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="emailPcmList">
                        <date-filter/><econdition field-name="partyId"/>
                        <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress"/>
                        <order-by field-name="-fromDate"/>
                    </entity-find>
                </else-if>
            </if>
            <if condition="emailPcmList">
                <set field="emailAddressList" from="[]"/>
                <iterate list="emailPcmList" entry="emailPcm">
                    <set field="emailContactMechId" from="emailPcm.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="emailContactMech">
                        <field-map field-name="contactMechId" from="emailContactMechId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.party.contact.ContactMechPurpose" value-field="emailContactMechPurpose">
                        <field-map field-name="contactMechPurposeId" from="emailPcm.contactMechPurposeId"/>
                    </entity-find-one>
                    <set field="emailAddressInfo" from="[emailContactMechId:emailContactMechId, emailContactMech:emailContactMech,
                            emailContactMechPurposeId:emailPcm.contactMechPurposeId, emailContactMechPurpose:emailContactMechPurpose,
                            emailAddress:emailContactMech.infoString]"/>
                    <script>emailAddressList.add(emailAddressInfo)</script>
                </iterate>
            </if>
            <!-- <log level="warn" message="get#PartyContactInfoList finish context=${context.context}"/> -->
        </actions>
    </service>
    <service verb="store" noun="PartyContactInfo">
        <in-parameters>
            <parameter name="partyId" default-value="${ec.user.userAccount.partyId}"/>

            <parameter name="postalContactMechId"/>
            <parameter name="postalContactMechPurposeId"/>
            <auto-parameters entity-name="mantle.party.contact.PostalAddress" include="nonpk"/>
            <auto-parameters entity-name="moqui.basic.GeoPoint" include="nonpk"/>

            <parameter name="telecomContactMechId"/>
            <parameter name="telecomContactMechPurposeId"/>
            <auto-parameters entity-name="mantle.party.contact.TelecomNumber" include="nonpk"/>
            <parameter name="areaCode"><text-digits/></parameter>
            <parameter name="contactNumber"><matches regexp="^\d\d[-\. \d]*\d\d$" message="Please enter a valid phone number"/></parameter>

            <parameter name="emailContactMechId"/>
            <parameter name="emailContactMechPurposeId"/>
            <parameter name="emailAddress"><text-email/></parameter>

            <parameter name="otherContactMechId"/>
            <parameter name="otherContactMechTypeEnumId"/>
            <parameter name="otherContactMechPurposeId"/>
            <parameter name="otherInfoString"/>
        </in-parameters>
        <out-parameters>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="emailContactMechId"/>
            <parameter name="otherContactMechId"/>
        </out-parameters>
        <actions>
            <if condition="telecomContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyTelecomNumber" out-map="tnOut"
                        in-map="context + [contactMechId:telecomContactMechId, contactMechPurposeId:telecomContactMechPurposeId]"/>
                <else-if condition="contactNumber">
                    <service-call name="mantle.party.ContactServices.create#TelecomNumber" out-map="tnOut"
                            in-map="context + [contactMechPurposeId:telecomContactMechPurposeId]"/>
                </else-if>
            </if>
            <set field="telecomContactMechId" from="tnOut?.contactMechId ?: telecomContactMechId"/>

            <if condition="emailContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyContactOther" out-map="emOut"
                        in-map="[infoString:emailAddress, partyId:partyId, contactMechId:emailContactMechId,
                            contactMechPurposeId:emailContactMechPurposeId]"/>
                <else-if condition="emailAddress">
                    <service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="emOut"
                            in-map="context + [contactMechPurposeId:emailContactMechPurposeId]"/>
                </else-if>
            </if>
            <set field="emailContactMechId" from="emOut?.contactMechId ?: emailContactMechId"/>

            <if condition="otherContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyContactOther" out-map="otherOut"
                        in-map="[infoString:otherInfoString, partyId:partyId, contactMechId:otherContactMechId,
                            contactMechPurposeId:otherContactMechPurposeId]"/>
                <else-if condition="otherInfoString">
                    <service-call name="mantle.party.ContactServices.create#ContactMechOther" out-map="otherOut"
                            in-map="context + [infoString:otherInfoString, contactMechTypeEnumId:otherContactMechTypeEnumId,
                                contactMechPurposeId:otherContactMechPurposeId]"/>
                </else-if>
            </if>
            <set field="otherContactMechId" from="otherOut?.contactMechId ?: otherContactMechId"/>

            <!-- do postal last so PostalAddress.telecomContactMechId and emailContactMechId can be populated -->
            <if condition="postalContactMechId">
                <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" out-map="paOut"
                        in-map="context + [contactMechId:postalContactMechId, contactMechPurposeId:postalContactMechPurposeId]"/>
                <else-if condition="address1 || city || postalCode">
                    <service-call name="mantle.party.ContactServices.create#PostalAddress" out-map="paOut"
                            in-map="context + [contactMechPurposeId:postalContactMechPurposeId]"/>
                </else-if>
            </if>
            <set field="postalContactMechId" from="paOut?.contactMechId ?: postalContactMechId"/>
        </actions>
    </service>


    <!-- PostalAddress Services -->
    <service verb="create" noun="PostalAddress">
        <description>
            Create a Postal Address (and the corresponding ContactMech record).
            If partyId and contactMechPurposeId are also passed will create a PartyContactMech record.
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.party.contact.PostalAddress" include="nonpk"/>
            <auto-parameters entity-name="moqui.basic.GeoPoint" include="nonpk"/>

            <parameter name="partyId"/>
            <parameter name="facilityId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="latitude || elevation">
                <service-call name="create#moqui.basic.GeoPoint" in-map="context" out-map="context"/></if>

            <service-call name="create#mantle.party.contact.ContactMech" out-map="context"
                    in-map="context + [contactMechTypeEnumId:'CmtPostalAddress']"/>
            <service-call name="create#mantle.party.contact.PostalAddress" in-map="context"/>

            <if condition="partyId &amp;&amp; contactMechPurposeId">
                <service-call name="create#mantle.party.contact.PartyContactMech" in-map="context"/></if>
            <if condition="facilityId &amp;&amp; contactMechPurposeId">
                <service-call name="create#mantle.facility.FacilityContactMech" in-map="context"/></if>
        </actions>
    </service>
    <service verb="update" noun="PartyPostalAddress">
        <description>
            Update a Postal Address for a Party. PostalAddress is immutable, so this creates a new one and associates
            it with the Party, expiring the old associations (PartyContactMech records).

            If a contactMechPurposeId is passed in it will only update for that purpose, otherwise it will update for
            all purposes.

            NOTE: if you want to update the ContactMech.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the ContactMech entity (do not use this service).
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.party.contact.PostalAddress" include="nonpk"/>
            <auto-parameters entity-name="moqui.basic.GeoPoint" include="nonpk"/>

            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="origPostalAddress"/>

            <!-- first handle the GeoPoint as a dependent record, getting an updated geoPointId if needed -->
            <set field="geoPointId" from="origPostalAddress.geoPointId"/>
            <if condition="geoPointId">
                <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="origGeoPoint"/>
                <set field="newGeoPoint" from="origGeoPoint.cloneValue()"/>
                <entity-set value-field="newGeoPoint" include="nonpk"/>
                <if condition="newGeoPoint != origGeoPoint">
                    <set field="newGeoPoint.geoPointId" from="null"/>
                    <entity-sequenced-id-primary value-field="newGeoPoint"/>
                    <entity-create value-field="newGeoPoint"/>
                    <set field="geoPointId" from="newGeoPoint.geoPointId"/>
                </if>

                <else>
                    <!-- this will get a geoPointId to set below on the PostalAddress -->
                    <if condition="latitude || elevation">
                        <service-call name="create#moqui.basic.GeoPoint" in-map="context" out-map="context"/></if>
                </else>
            </if>

            <set field="newPostalAddress" from="origPostalAddress.cloneValue()"/>
            <entity-set value-field="newPostalAddress" include="nonpk" set-if-empty="true"/>
            <if condition="newPostalAddress == origPostalAddress">
                <log level="info" message="No fields were different for Postal Address with ID [${contactMechId}], not updating."/>
                <return/>
            </if>

            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList">
                <date-filter/>
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechId" from="contactMechId"/>
                <econdition field-name="contactMechPurposeId" from="contactMechPurposeId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!origPcmList">
                <return error="true" message="Postal Address with ID [${contactMechId}] is not associated with party ID [${partyId}] and purpose [${contactMechPurposeId?:'N/A'}], not updating."/>
            </if>

            <!-- at this point we have at least one PCM, so create the updated PostalAddress and then expire/update the PCMs -->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="newContactMech"/>
            <set field="newContactMech.contactMechId" from="null"/>
            <entity-sequenced-id-primary value-field="newContactMech"/>
            <entity-create value-field="newContactMech"/>

            <set field="newPostalAddress.contactMechId" from="newContactMech.contactMechId"/>
            <entity-create value-field="newPostalAddress"/>

            <iterate list="origPcmList" entry="origPcm">
                <!-- expire origPcm, create new for new contactMechId -->
                <set field="origPcm.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="origPcm"/>

                <entity-make-value entity-name="mantle.party.contact.PartyContactMech" value-field="newPcm"
                        map="[partyId:partyId, contactMechId:newContactMech.contactMechId, fromDate:ec.user.nowTimestamp]"/>
                <set field="newPcm.contactMechPurposeId" from="origPcm.contactMechPurposeId"/>
                <set field="newPcm.extension" from="origPcm.extension"/>
                <set field="newPcm.comments" from="origPcm.comments"/>
                <set field="newPcm.allowSolicitation" from="origPcm.allowSolicitation"/>
                <entity-create value-field="newPcm"/>
            </iterate>

            <set field="result.contactMechId" from="newContactMech.contactMechId"/>
        </actions>
    </service>
    <service verb="get" noun="PostalAddressGeoIdSet">
        <in-parameters><parameter name="contactMechId"/></in-parameters>
        <out-parameters><parameter name="geoIdSet" type="Set"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
            <set field="geoIdSet" from="new HashSet()"/>
            <script>
                if (postalAddress?.countyGeoId) geoIdSet.add(postalAddress.countyGeoId)
                if (postalAddress?.stateProvinceGeoId) geoIdSet.add(postalAddress.stateProvinceGeoId)
                if (postalAddress?.countryGeoId) geoIdSet.add(postalAddress.countryGeoId)
                if (postalAddress?.postalCodeGeoId) geoIdSet.add(postalAddress.postalCodeGeoId)
            </script>
            <!-- TODO: consider expanding this, ie figure out country from state/province... and save on PostalAddress? -->
        </actions>
    </service>

    <!-- TelecomNumber Services -->
    <service verb="create" noun="TelecomNumber">
        <description>
            Create a Telecom Number (and the corresponding ContactMech record).
            If partyId and contactMechPurposeId are also passed will create a PartyContactMech record.
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.party.contact.TelecomNumber" include="nonpk"/>

            <parameter name="partyId"/>
            <parameter name="facilityId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="mantle.party.contact.ContactMech" value-field="contactMech"
                    map="[contactMechTypeEnumId:'CmtTelecomNumber']"/>
            <entity-sequenced-id-primary value-field="contactMech"/>
            <entity-create value-field="contactMech"/>
            <set field="contactMechId" from="contactMech.contactMechId"/>

            <entity-make-value entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber"/>
            <set field="telecomNumber.contactMechId" from="contactMech.contactMechId"/>
            <entity-set value-field="telecomNumber" include="nonpk"/>
            <entity-create value-field="telecomNumber"/>

            <if condition="partyId &amp;&amp; contactMechPurposeId">
                <service-call name="create#mantle.party.contact.PartyContactMech" in-map="context"/></if>
            <if condition="facilityId &amp;&amp; contactMechPurposeId">
                <service-call name="create#mantle.facility.FacilityContactMech" in-map="context"/></if>
        </actions>
    </service>
    <service verb="update" noun="PartyTelecomNumber">
        <description>
            Update a Telecom Number for a Party. TelecomNumber is immutable, so this creates a new one and associates
            it with the Party, expiring the old associations (PartyContactMech records).

            If a contactMechPurposeId is passed in it will only update for that purpose, otherwise it will update for
            all purposes.

            NOTE: if you want to update the ContactMech.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the ContactMech entity (do not use this service).
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.party.contact.TelecomNumber" include="nonpk"/>

            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="origTelecomNumber"/>
            <script>newTelecomNumber = origTelecomNumber.cloneValue()</script>
            <entity-set value-field="newTelecomNumber" include="nonpk"/>
            <if condition="newTelecomNumber == origTelecomNumber">
                <log level="info" message="No fields were different for Telecom Number with ID [${contactMechId}], not updating."/>
                <return error="false"/>
            </if>

            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList">
                <date-filter/>
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechId" from="contactMechId"/>
                <econdition field-name="contactMechPurposeId" from="contactMechPurposeId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!origPcmList">
                <return error="true" message="Telecom Number with ID [${contactMechId}] is not associated with party ID [${partyId}] and purpose [${contactMechPurposeId?:'N/A'}], not updating."/>
            </if>

            <!-- at this point we have at least one PCM, so create the updated TelecomNumber and then expire/update the PCMs -->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="newContactMech"/>
            <set field="newContactMech.contactMechId" from="null"/>
            <entity-sequenced-id-primary value-field="newContactMech"/>
            <entity-create value-field="newContactMech"/>

            <set field="newTelecomNumber.contactMechId" from="newContactMech.contactMechId"/>
            <entity-create value-field="newTelecomNumber"/>

            <iterate list="origPcmList" entry="origPcm">
                <!-- expire origPcm, create new for new contactMechId -->
                <set field="origPcm.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="origPcm"/>

                <entity-make-value entity-name="mantle.party.contact.PartyContactMech" value-field="newPcm"
                        map="[partyId:partyId, contactMechId:newContactMech.contactMechId, fromDate:ec.user.nowTimestamp]"/>
                <set field="newPcm.contactMechPurposeId" from="origPcm.contactMechPurposeId"/>
                <set field="newPcm.extension" from="origPcm.extension"/>
                <set field="newPcm.comments" from="origPcm.comments"/>
                <set field="newPcm.allowSolicitation" from="origPcm.allowSolicitation"/>
                <entity-create value-field="newPcm"/>
            </iterate>

            <set field="result.contactMechId" from="newContactMech.contactMechId"/>
        </actions>
    </service>

    <!-- Email Services -->
    <service verb="create" noun="EmailAddress">
        <in-parameters>
            <parameter name="emailAddress" required="true"><text-email/></parameter>

            <parameter name="partyId"/>
            <parameter name="facilityId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.party.ContactServices.create#ContactMechOther" out-map="context"
                    in-map="[infoString:emailAddress, contactMechTypeEnumId:'CmtEmailAddress',
                        partyId:partyId, facilityId:facilityId, contactMechPurposeId:contactMechPurposeId]"/>
        </actions>
    </service>
    <service verb="get" noun="PrimaryEmailAddress">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emailAddress"/>
            <parameter name="contactMechId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="PartyContactMechInfo" list="pcmiList">
                <date-filter/>
                <econdition-object field="[partyId:partyId, contactMechPurposeId:'EmailPrimary']"/>
            </entity-find>
            <if condition="pcmiList">
                <set field="emailAddress" from="pcmiList[0].infoString"/>
                <set field="contactMechId" from="pcmiList[0].contactMechId"/>

                <else>
                    <!-- get emailAddress from UserAccount -->
                    <entity-find entity-name="UserAccount" list="uaList"><econdition field-name="partyId"/></entity-find>
                    <if condition="uaList"><set field="emailAddress" from="uaList[0].emailAddress"/></if>
                </else>
            </if>
        </actions>
    </service>

    <!-- Other ContactMech Services -->
    <service verb="create" noun="ContactMechOther">
        <in-parameters>
            <parameter name="infoString" required="true"/>
            <parameter name="contactMechTypeEnumId" required="true"/>

            <parameter name="partyId"/>
            <parameter name="facilityId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="mantle.party.contact.ContactMech" value-field="contactMech"
                    map="[contactMechTypeEnumId:contactMechTypeEnumId, infoString:infoString]"/>
            <entity-sequenced-id-primary value-field="contactMech"/>
            <entity-create value-field="contactMech"/>
            <set field="contactMechId" from="contactMech.contactMechId"/>

            <if condition="partyId &amp;&amp; contactMechPurposeId">
                <service-call name="create#mantle.party.contact.PartyContactMech"
                        in-map="context + [fromDate:ec.user.nowTimestamp]"/></if>
            <if condition="facilityId &amp;&amp; contactMechPurposeId">
                <service-call name="create#mantle.facility.FacilityContactMech"
                        in-map="context + [fromDate:ec.user.nowTimestamp]"/></if>
        </actions>
    </service>
    <service verb="update" noun="PartyContactOther">
        <description>
            Update 'Other' contact info (not PostalAddress or TelecomNumber) for a Party. ContactMech is immutable, so
            this creates a new one and associates it with the Party, expiring the old associations (PartyContactMech
            records).

            If a contactMechPurposeId is passed in it will only update for that purpose, otherwise it will update for
            all purposes.

            NOTE: if you want to update the ContactMech.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the ContactMech entity (do not use this service).
        </description>
        <in-parameters>
            <parameter name="infoString" required="true"/>

            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="!contactMechId &amp;&amp; !contactMechPurposeId">
                <return error="false" message="Must specify either a contactMechId or contactMechPurposeId (or both)."/>
            </if>

            <entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList">
                <date-filter/>
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechId" from="contactMechId" ignore-if-empty="true"/>
                <econdition field-name="contactMechPurposeId" from="contactMechPurposeId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!origPcmList">
                <log level="info" message="Contact Info with ID [${contactMechId}] is not associated with party ID [${partyId}] and purpose [${contactMechPurposeId?:'N/A'}], not updating."/>
                <return/>
            </if>
            <set field="contactMechId" from="contactMechId ?: origPcmList[0].contactMechId"/>

            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="origContactMech"/>
            <script>newContactMech = origContactMech.cloneValue()</script>
            <set field="newContactMech.infoString" from="infoString"/>
            <if condition="newContactMech == origContactMech">
                <return error="false" message="No fields were different for Contact Info with ID [${contactMechId}], not updating."/>
            </if>

            <!-- at this point we have at least one PCM, so create the updated ContactMech and then expire/update the PCMs -->
            <set field="newContactMech.contactMechId" from="null"/>
            <entity-sequenced-id-primary value-field="newContactMech"/>
            <entity-create value-field="newContactMech"/>

            <iterate list="origPcmList" entry="origPcm">
                <!-- expire origPcm, create new for new contactMechId -->
                <set field="origPcm.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="origPcm"/>

                <entity-make-value entity-name="mantle.party.contact.PartyContactMech" value-field="newPcm"
                        map="[partyId:partyId, contactMechId:newContactMech.contactMechId, fromDate:ec.user.nowTimestamp]"/>
                <set field="newPcm.contactMechPurposeId" from="origPcm.contactMechPurposeId"/>
                <set field="newPcm.extension" from="origPcm.extension"/>
                <set field="newPcm.comments" from="origPcm.comments"/>
                <set field="newPcm.allowSolicitation" from="origPcm.allowSolicitation"/>
                <entity-create value-field="newPcm"/>
            </iterate>

            <set field="result.contactMechId" from="newContactMech.contactMechId"/>
        </actions>
    </service>

    <service verb="delete" noun="PartyContactMech">
        <description>Delete service for all types of ContactMech, actually expires PartyContactMech record.</description>
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <actions>
            <script><![CDATA[
                def ef = ec.entity.find("mantle.party.contact.PartyContactMech")
                ef.condition([partyId: partyId, contactMechId: contactMechId])
                if (contactMechPurposeId) ef.condition("contactMechPurposeId", contactMechPurposeId)
                ef.updateAll([thruDate: ec.user.getNowTimestamp()])
                ]]></script>
        </actions>
    </service>
</services>
