<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">
    <service verb="process" noun="EmploymentPay">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="timePeriodId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>

        </out-parameters>
        <actions>
            <!-- TODO create Invoice -->

            <!-- TODO create EmploymentPayHistory record -->
        </actions>
    </service>

    <service verb="get" noun="EmploymentPayAmount">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="timePeriodId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="payAmount" type="BigDecimal"/>
            <parameter name="currencyUomId"/>
            <parameter name="salaryFlag"/>

            <parameter name="employment" type="Map"/>
            <parameter name="emplPosition" type="Map"/>
            <parameter name="timePeriod" type="Map"/>
            <parameter name="fromTimestamp" type="Timestamp"/>
            <parameter name="thruTimestamp" type="Timestamp"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/>
            <entity-find-one entity-name="mantle.humanres.position.EmplPosition" value-field="emplPosition">
                <field-map field-name="emplPositionId" from="employment.emplPositionId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromDetail">
                <field-map field-name="partyId" from="employment.fromPartyId"/></entity-find-one>

            <set field="salaryFlag" from="emplPosition.salaryFlag ?: 'N'"/>
            <set field="payAmount" from="0"/>

            <if condition="employment.timePeriodTypeId != timePeriod.timePeriodTypeId">
                <return message="Employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)} is not paid in this type of period"/></if>

            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>

            <if condition="employment.fromDate != null &amp;&amp; employment.fromDate &gt; thruTimestamp">
                <return message="Employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)} is not yet employed"/></if>
            <if condition="employment.thruDate != null &amp;&amp; employment.thruDate &lt; fromTimestamp">
                <return message="Employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)} is no longer employed"/></if>

            <if condition="salaryFlag == 'Y'">
                <then>
                    <!-- NOTE: if salary changes mid-period, pro-rate the rate by applicable time? currently uses salary on period thruDate -->
                    <entity-find entity-name="mantle.humanres.employment.EmploymentSalary" list="employmentSalaryList">
                        <date-filter valid-date="thruTimestamp"/>
                        <econdition field-name="partyRelationshipId"/>
                        <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/>
                        <order-by field-name="-fromDate"/><!-- if more than one get most recent -->
                    </entity-find>

                    <if condition="!employmentSalaryList">
                        <return error="true" message="No salary found for salaried employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)}"/></if>
                    <set field="employmentSalary" from="employmentSalaryList[0]"/>

                    <set field="payAmount"  from="employmentSalary.amount"/>
                    <set field="currencyUomId" from="employmentSalary.currencyUomId"/>

                    <!-- handle partial period for salary (first and last, ie by from and thru) -->
                    <if condition="employment.fromDate != null &amp;&amp; employment.fromDate &gt; fromTimestamp">
                        <set field="partialFrom" from="employment.fromDate"/></if>
                    <if condition="employment.thruDate != null &amp;&amp; employment.thruDate &lt; thruTimestamp">
                        <set field="partialThru" from="employment.thruDate"/></if>
                    <if condition="partialFrom || partialThru">
                        <if condition="partialFrom"><set field="partialFromDate" from="new java.sql.Date(partialFrom.time)"/>
                            <else><set field="partialFromDate" from="timePeriod.fromDate"/></else></if>
                        <if condition="partialThru"><set field="partialThruDate" from="new java.sql.Date(partialThru.time)"/>
                            <else><set field="partialThruDate" from="timePeriod.thruDate"/></else></if>
                        <!-- TODO: this is messy, consider working days, etc? -->
                        <!-- for now do a simple ratio of milliseconds -->
                        <set field="partialTime" from="partialThru.time - partialFrom.time"/>
                        <set field="periodTime" from="timePeriod.thruDate.time - timePeriod.fromDate.time"/>
                        <set field="payAmount" from="(payAmount * (partialTime/periodTime)).setScale(2, BigDecimal.ROUND_HALF_UP)"/>
                    </if>
                </then>
                <else>
                    <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                        <econdition field-name="partyId" from="employment.fromPartyId"/>
                        <econdition field-name="clientPartyId" from="employment.toPartyId"/>
                        <econdition field-name="thruDate" operator="greater-equals" from="fromTimestamp"/>
                        <econdition field-name="thruDate" operator="less-equals" from="thruTimestamp"/>
                    </entity-find>
                    <iterate list="timeEntryList" entry="timeEntry">
                        <!-- NOTE: this service gets the higher of hourly and piece amounts -->
                        <service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="getTeaOut"
                                in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/>
                        <set field="payAmount" from="payAmount + getTeaOut.amountTotal"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="get" noun="TimePeriodEmployments">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="employmentList" type="List"/>
            <parameter name="timePeriod" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
            <!-- convert from plain date range to date/time range; use parseTimestamp to be locale sensitive -->
            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>
            <entity-find entity-name="mantle.humanres.employment.EmploymentFromDetail" list="employmentList">
                <search-form-inputs default-order-by="pseudoId"/>
                <econdition field-name="toPartyId" from="timePeriod.partyId"/>
                <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/>
                <econdition field-name="fromDate" operator="less-equals" from="thruTimestamp" or-null="true"/>
                <econdition field-name="thruDate" operator="greater-equals" from="fromTimestamp" or-null="true"/>
            </entity-find>
        </actions>
    </service>
    <service verb="get" noun="TimePeriodTotalPayAmount">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="payAmountByCurrencyUomId" type="Map"/>
        </out-parameters>
        <actions>
            <!-- find all employees active in the time period -->
            <service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments" in-map="context" out-map="context"/>

            <!-- go through employmentList and get/calc amount for each, add to total -->
            <set field="payAmountByCurrencyUomId" from="[:]"/>
            <iterate list="employmentList" entry="employment">
                <service-call name="mantle.humanres.PayrollServices.get#EmploymentPayAmount" out-map="payOut"
                        in-map="[timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]"/>
                <script>StupidUtilities.addToBigDecimalInMap(payOut.currencyUomId, payOut.payAmount, payAmountByCurrencyUomId)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="EmploymentPayDetail">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="timePeriodId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="payAmount" type="BigDecimal"/>
            <parameter name="currencyUomId"/>
            <parameter name="salaryFlag"/>

            <parameter name="employment" type="Map"/>
            <parameter name="emplPosition" type="Map"/>
            <parameter name="timePeriod" type="Map"/>

            <parameter name="adjustmentList" type="List">
                <description>List of Maps with out parameters from calculate#PayrollAdjustment</description></parameter>
            <parameter name="netPayAmount" type="BigDecimal"/>

            <parameter name="taxablePayAmount" type="BigDecimal"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- get the pay amount and employment, emplPosition, timePeriod, fromTimestamp, thruTimestamp -->
            <service-call name="mantle.humanres.PayrollServices.get#EmploymentPayAmount" in-map="context" out-map="context"/>

            <!-- set initial taxablePayAmount, socialTaxablePayAmount, medicalTaxablePayAmount -->
            <set field="taxablePayAmount" from="payAmount"/>
            <set field="socialTaxablePayAmount" from="payAmount"/>
            <set field="medicalTaxablePayAmount" from="payAmount"/>

            <!-- TODO calc taxableYtdIncome, socialTaxableYtdIncome, medicalTaxableYtdIncome -->

            <!-- get homePostalAddress -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="homePostalAddress">
                <field-map field-name="contactMechId" from="employment.taxHomeContactMechId"/></entity-find-one>

            <!-- calculate the adjustments -->
            <set field="adjustmentList" from="[]"/>

            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustment" list="allPayrollAdjustmentList">
                <date-filter valid-date="thruTimestamp"/>
                <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/>
            </entity-find>

            <!-- calculate global and employee adjustments (deductions, etc) - taxable -->
            <set field="taxableCondition" from="ec.entity.conditionFactory.makeCondition(
                [[partyRelationshipId:null, partyRelationshipId:partyRelationshipId],
                [isTaxable:'Y', isSocialTaxable:'Y', isMedicalTaxable:'Y']], 'and', '=', 'or')"/>
            <script>dedPayrollAdjustmentList = allPayrollAdjustmentList.cloneList().filterByCondition(taxableCondition)</script>
            <iterate list="dedPayrollAdjustmentList" entry="payrollAdjustment">
                <service-call name="mantle.humanres.PayrollServices.calculate#PayrollAdjustment" out-map="calcOut"
                    in-map="[payrollAdjustmentId:payrollAdjustment.payrollAdjustmentId, payrollAdjustment:payrollAdjustment,
                        partyRelationshipId:partyRelationshipId, employment:employment,
                        timePeriodTypeId:timePeriod.timePeriodTypeId, thruTimestamp:thruTimestamp,
                        payAmount:payAmount, taxablePayAmount:taxablePayAmount,
                        socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,
                        taxableYtdIncome:taxableYtdIncome, socialTaxableYtdIncome:socialTaxableYtdIncome,
                        medicalTaxableYtdIncome:medicalTaxableYtdIncome,
                        homePostalAddress:homePostalAddress]"/>
                <script>adjustmentList.add(calcOut)</script>
                <!-- TODO: update taxablePayAmount, socialTaxablePayAmount, medicalTaxablePayAmount -->
                <!-- TODO: update taxableYtdIncome, socialTaxableYtdIncome, medicalTaxableYtdIncome -->
            </iterate>

            <!-- calculate global and employee adjustments (deductions, etc) - not taxable -->
            <set field="partyRelCondition" from="ec.entity.conditionFactory.makeCondition(
                [[partyRelationshipId:null, partyRelationshipId:partyRelationshipId]], 'and', '=', 'or')"/>
            <script>otherPayrollAdjustmentList = allPayrollAdjustmentList.cloneList().filterByCondition(partyRelCondition)
                    .removeByAnd([isTaxable:'Y']).removeByAnd([isSocialTaxable:'Y']).removeByAnd([isMedicalTaxable:'Y'])</script>
            <iterate list="otherPayrollAdjustmentList" entry="payrollAdjustment">
                <service-call name="mantle.humanres.PayrollServices.calculate#PayrollAdjustment" out-map="calcOut"
                    in-map="[payrollAdjustmentId:payrollAdjustment.payrollAdjustmentId, payrollAdjustment:payrollAdjustment,
                        partyRelationshipId:partyRelationshipId, employment:employment,
                        timePeriodTypeId:timePeriod.timePeriodTypeId, thruTimestamp:thruTimestamp,
                        payAmount:payAmount, taxablePayAmount:taxablePayAmount,
                        socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,
                        taxableYtdIncome:taxableYtdIncome, socialTaxableYtdIncome:socialTaxableYtdIncome,
                        medicalTaxableYtdIncome:medicalTaxableYtdIncome,
                        homePostalAddress:homePostalAddress]"/>
                <script>adjustmentList.add(calcOut)</script>
            </iterate>

            <!-- calculate netPayAmount -->
            <set field="netPayAmount" from="payAmount"/>
            <iterate list="adjustmentList" entry="adjustment">
                <set field="netPayAmount" from="netPayAmount + adjustment.amount"/></iterate>
        </actions>
    </service>
    <service verb="calculate" noun="PayrollAdjustment">
        <in-parameters>
            <parameter name="payrollAdjustmentId" required="true"/>
            <parameter name="payrollAdjustment" type="Map"/>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="employment" type="Map"/>

            <parameter name="timePeriodTypeId" required="true"/>
            <parameter name="thruTimestamp" type="Timestamp"/>

            <parameter name="payAmount" type="BigDecimal" required="true"/>
            <parameter name="taxablePayAmount" type="BigDecimal" required="true"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal" required="true"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal" required="true"/>
            <parameter name="taxableYtdIncome" type="BigDecimal" required="true"/>
            <parameter name="socialTaxableYtdIncome" type="BigDecimal" required="true"/>
            <parameter name="medicalTaxableYtdIncome" type="BigDecimal" required="true"/>

            <parameter name="homePostalAddress" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="adjustmentApplies" type="Boolean"/>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="basisPayAmount" type="BigDecimal"/>
            <parameter name="stdDeductionAmount" type="BigDecimal"/>
            <parameter name="allowanceDeductionAmount" type="BigDecimal"/>
            <parameter name="allowanceExemptionAmount" type="BigDecimal"/>
            <parameter name="payrollAdjustment" type="Map"/>
        </out-parameters>
        <actions>
            <set field="adjustmentApplies" from="false"/>

            <set field="amount" from="0"/>
            <set field="stdDeductionAmount" from="0"/>
            <set field="allowanceDeductionAmount" from="0"/>
            <set field="allowanceExemptionAmount" from="0"/>

            <if condition="!payrollAdjustment">
                <entity-find-one entity-name="mantle.humanres.employment.PayrollAdjustment" value-field="payrollAdjustment"/></if>
            <if condition="!employment">
                <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/></if>

            <if condition="payrollAdjustment.isTax == 'Y'">
                <then><set field="basisPayAmount" from="taxablePayAmount"/></then>
                <else-if condition="payrollAdjustment.isSocialTax == 'Y'"><set field="basisPayAmount" from="socialTaxablePayAmount"/></else-if>
                <else-if condition="payrollAdjustment.isMedicalTax == 'Y'"><set field="basisPayAmount" from="medicalTaxablePayAmount"/></else-if>
                <else><set field="basisPayAmount" from="payAmount"/></else>
            </if>

            <!-- check state and federal filing status constraints, if any; if there are but none match skip it -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentFedStts" list="fedSttsList">
                <econdition field-name="payrollAdjustmentId"/></entity-find>
            <if condition="fedSttsList &amp;&amp; employment.taxFederalStatusEnumId">
                <filter-map-list list="fedSttsList"><field-map field-name="taxFederalStatusEnumId" from="employment.taxFederalStatusEnumId"/></filter-map-list>
                <if condition="!fedSttsList"><return/></if>
            </if>
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentStateStts" list="stateSttsList">
                <econdition field-name="payrollAdjustmentId"/></entity-find>
            <if condition="stateSttsList &amp;&amp; employment.taxStateStatusEnumId">
                <filter-map-list list="stateSttsList"><field-map field-name="taxStateStatusEnumId" from="employment.taxStateStatusEnumId"/></filter-map-list>
                <if condition="!stateSttsList"><return/></if>
            </if>

            <if condition="payrollAdjustment.isTax == 'Y' || payrollAdjustment.isSocialTax == 'Y' || payrollAdjustment.isMedicalTax == 'Y'">
                <entity-find-one entity-name="mantle.other.tax.TaxAuthority" value-field="taxAuthority">
                    <field-map field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/></entity-find-one>

                <!-- see if employee home is in jurisdiction, if not skip this adjustment (return); also set applicable taxAllowances -->
                <if condition="taxAuthority.taxAuthorityTypeEnumId == 'TatFederal'">
                    <then>
                        <if condition="homePostalAddress.countryGeoId != taxAuthority.taxAuthGeoId"><return/></if>
                        <set field="taxAllowances" from="employment.taxFederalAllowances"/>
                    </then>
                    <else-if condition="taxAuthority.taxAuthorityTypeEnumId == 'TatState'">
                        <if condition="homePostalAddress.stateProvinceGeoId != taxAuthority.taxAuthGeoId"><return/></if>
                        <set field="taxAllowances" from="employment.taxStateAllowances"/>
                    </else-if>
                    <else>
                        <set field="taxAllowances" from="0"/>
                    </else>
                </if>

                <!-- Find applicable PayrollStdDeduction, subtract from basisPayAmount -->
                <if condition="payrollAdjustment.applyStdDeduction == 'Y'">
                    <entity-find entity-name="mantle.humanres.employment.PayrollStdDeduction" list="stdDeductionList">
                        <date-filter valid-date="thruTimestamp"/>
                        <econdition field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/>
                        <econdition field-name="timePeriodTypeId"/>
                        <econdition field-name="taxFederalStatusEnumId" from="employment.taxFederalStatusEnumId"
                                ignore="taxAuthority.taxAuthorityTypeEnumId != 'TatFederal'"/>
                        <econdition field-name="taxStateStatusEnumId" from="employment.taxStateStatusEnumId"
                                ignore="taxAuthority.taxAuthorityTypeEnumId != 'TatState'"/>
                        <econdition field-name="minAllowances" operator="less-equals" from="taxAllowances" or-null="true"/>
                        <econdition field-name="maxAllowances" operator="greater-equals" from="taxAllowances" or-null="true"/>
                    </entity-find>
                    <if condition="stdDeductionList">
                        <set field="stdDeduction" from="stdDeductionList[0]"/>
                        <set field="stdDeductionAmount" from="stdDeduction.amount"/>
                        <set field="basisPayAmount" from="basisPayAmount - stdDeductionAmount"/>
                    </if>
                </if>

                <!-- Find applicable PayrollAllowance Deductions, multiply by (taxFederalAllowances or taxStateAllowances)
                    subtract from basisPayAmount -->
                <if condition="payrollAdjustment.applyAllowanceDeduction == 'Y' &amp;&amp; taxAllowances">
                    <entity-find entity-name="mantle.humanres.employment.PayrollAllowance" list="allowanceList">
                        <date-filter valid-date="thruTimestamp"/>
                        <econdition field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/>
                        <econdition field-name="timePeriodTypeId"/>
                        <econdition field-name="amountTypeEnumId" value="PaatDeduction"/>
                    </entity-find>
                    <if condition="allowanceList">
                        <set field="allowance" from="allowanceList[0]"/>
                        <set field="allowanceDeductionAmount" from="allowance.amount * taxAllowances"/>
                        <set field="basisPayAmount" from="basisPayAmount - allowanceDeductionAmount"/>
                        <if condition="basisPayAmount &lt; 0"><set field="basisPayAmount" from="0"/></if>
                    </if>
                </if>
            </if>

            <!-- Find the applicable PayrollAdjustmentDetail record -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentDetail" list="payrollAdjustmentDetailList">
                <econdition field-name="payrollAdjustmentId"/>
                <econdition field-name="ytdMin" operator="less-equals" from="ytdIncome" or-null="true"/>
                <econdition field-name="ytdMax" operator="greater" from="ytdIncome" or-null="true"/>
                <econdition field-name="periodMin" operator="less-equals" from="basisPayAmount" or-null="true"/>
                <econdition field-name="periodMax" operator="greater" from="basisPayAmount" or-null="true"/>
                <order-by field-name="-percentage,-flatAmount"/><!-- should always be one record, but just in case take the highest -->
            </entity-find>
            <!-- calculate adjustment amount -->
            <if condition="payrollAdjustmentDetailList">
                <set field="adjustmentDetail" from="payrollAdjustmentDetailList[0]"/>

                <set field="percentageBasis" from="basisPayAmount"/>
                <if condition="adjustmentDetail.percAfterYtdMin == 'Y'">
                    <set field="percentageBasis" from="percentageBasis - adjustmentDetail.ytdMin"/></if>
                <if condition="adjustmentDetail.percAfterPeriodMin == 'Y'">
                    <set field="percentageBasis" from="percentageBasis - adjustmentDetail.periodMin"/></if>
                <set field="amount" from="(adjustmentDetail.flatAmount ?: 0) + ((adjustmentDetail.percentage ?: 0) * percentageBasis)"/>
                <set field="amount" from="amount.setScale(2, BigDecimal.ROUND_HALF_UP)"/>

                <set field="adjustmentApplies" from="true"/>
            </if>

            <!-- Find applicable PayrollAllowance Exemptions, multiply by (taxFederalAllowances or taxStateAllowances)
                subtract from adjustment amount, make sure amount is at least zero -->
            <if condition="payrollAdjustment.applyAllowanceExemption == 'Y' &amp;&amp; taxAllowances">
                <entity-find entity-name="mantle.humanres.employment.PayrollAllowance" list="allowanceExmList">
                    <date-filter valid-date="thruTimestamp"/>
                    <econdition field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/>
                    <econdition field-name="timePeriodTypeId"/>
                    <econdition field-name="amountTypeEnumId" value="PaatExemption"/>
                </entity-find>
                <if condition="allowanceExmList">
                    <set field="allowance" from="allowanceExmList[0]"/>
                    <set field="allowanceExemptionAmount" from="allowance.amount * taxAllowances"/>
                    <set field="amount" from="amount - allowanceExemptionAmount"/>
                    <if condition="amount &lt; 0"><set field="amount" from="0"/></if>
                </if>
            </if>
        </actions>
    </service>
</services>
