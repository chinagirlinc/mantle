/*
 * This is free and unencumbered software released into the public domain.
 * For specific language governing permissions and limitations refer to
 * the LICENSE.md file or http://unlicense.org
 */

apply plugin: 'groovy'

sourceCompatibility = '1.7'
def moquiDir = file(projectDir.absolutePath + '/../../..')
def frameworkDir = file(moquiDir.absolutePath + '/framework')

// maybe in the future: repositories { mavenCentral() }
repositories {
    flatDir name: 'localLib', dirs: frameworkDir.absolutePath + '/lib'
    flatDir name: 'localLibCamel', dirs: frameworkDir.absolutePath + '/lib/camel'
    flatDir name: 'localLibFop', dirs: frameworkDir.absolutePath + '/lib/fop'
    flatDir name: 'localLibSearch', dirs: frameworkDir.absolutePath + '/lib/search'
    flatDir name: 'localLibKie', dirs: frameworkDir.absolutePath + '/lib/kie'
    flatDir name: 'localLibOrientDb', dirs: frameworkDir.absolutePath + '/lib/orientdb'
    flatDir name: 'moquiLib', dirs: frameworkDir.absolutePath + '/build/libs'
}

dependencies {
    compile fileTree(dir: frameworkDir.absolutePath + '/lib', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/camel', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/fop', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/search', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/kie', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/orientdb', includes: ['*.jar'])
    compile name: 'moqui-framework', version: version // Public Domain
}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
check.dependsOn.remove(test)

test {
    dependsOn clean

    systemProperty 'moqui.runtime', moquiDir.absolutePath + '/runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevTestConf.xml'
    systemProperty 'moqui.init.static', 'true'
    maxHeapSize = "256M"
    jvmArgs '-XX:MaxPermSize=128m'

    testLogging.showStandardStreams = true

    classpath += files(sourceSets.main.output.classesDir)

    beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}") }
}
